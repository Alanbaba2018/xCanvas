{"version":3,"sources":["webpack://xCanvas/webpack/universalModuleDefinition","webpack://xCanvas/webpack/bootstrap","webpack://xCanvas/./lib/typeof/typeof.ts","webpack://xCanvas/./lib/core/evt.ts","webpack://xCanvas/./lib/math/math/operation.ts","webpack://xCanvas/./lib/math/math/vector2.ts","webpack://xCanvas/./lib/math/math/constant.ts","webpack://xCanvas/./lib/math/typedef/geometry_type.ts","webpack://xCanvas/./lib/math/math/base.ts","webpack://xCanvas/./lib/math/math/bound.ts","webpack://xCanvas/./lib/math/geometry/line.ts","webpack://xCanvas/./lib/math/geometry/polyline.ts","webpack://xCanvas/./lib/math/geometry/polygon.ts","webpack://xCanvas/./lib/util/util.ts","webpack://xCanvas/./lib/core/canvas.ts","webpack://xCanvas/./lib/layer/layer.ts","webpack://xCanvas/./lib/layer/text.ts","webpack://xCanvas/./lib/core/render.ts","webpack://xCanvas/./lib/core/stage.ts","webpack://xCanvas/./lib/layer/circle.ts","webpack://xCanvas/./lib/layer/polyline.ts","webpack://xCanvas/./lib/layer/polygon.ts","webpack://xCanvas/./lib/layer/rectangle.ts","webpack://xCanvas/./lib/layer/imageLayer.ts","webpack://xCanvas/./lib/layer/layerGroup.ts","webpack://xCanvas/./index.ts"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","GraphType","TextAlign","BaseLine","Evt","[object Object]","this","events","evt","length","fn","context","undefined","evts","split","ev","some","handle","ctx","push","on","handler","off","data","event","assign","type","target","sourceTarget","cl","listeners","index","findIndex","splice","Operation","angle","Math","PI","rad","v0","v1","x","y","vector2_Vector2","vec1","vec2","lerp","dir","add","scale","a","b","Array","console","error","vector2","Number","dis","getModelLength","rotatedRad","degreeToRadius","cos","sin","scale_x","scale_y","sqrt","Geometry_Type","constant","Zero","PI2","base_Base","tolerance","abs","pt1","pt2","p1","isArray","p2","isZero","pt","pts","result","transformPointToArray","transformPointToXY","xs","map","ys","minX","min","maxX","max","minY","maxY","bound_Bound","v2","bottomPt","topPt","base","comVec","getCrossMultiply","bound1","bound2","isOverlaped","width","height","bound","center0","getCenter","center1","v","getVetexs","contain","dx","dy","getBoundOfPoints","getDirectionVec","vertexs","preVec","curVec","isBothSide","line_Line","transformPointsToXY","vec0","getDotMultiply","normalize","transformPointsToArray","pedal","getPedalPointOfLine","isPointAtSegment","getSquareDistance","cross","isPointAtLine","p0","dir1","dir2","dir3","cross1","cross2","isParalled","isCollinear","warn","vec3","vec4","l1","l2","ratio","clone","base1","base2","getDirVector","w","h","line","getDirection","isIntersectOfSegment","polyline_Polyline","coordinates","MAX_VALUE","flatList","flat","coords","geos","coordinate","nearestPoints","pos","getNearestPointToSegment","sort","polygon_Polygon","super","_cleanData","count","curPt","nextPt","_isWithInTrapezoid","getBound","isPointAtPolygon","getDistanceToLine","isSamePoint","isLeftOfLine","Util","replace","random","toString","coord","Error","xy","path","newPath","vertex","transformToXY","transformToArray","url","xhr","XMLHttpRequest","open","responseType","send","Promise","resolve","onload","response","base64","fileName","Date","now","parts","contentType","raw","atob","rawLength","uInt8Array","Uint8Array","charCodeAt","blob","Blob","document","createElement","href","URL","createObjectURL","download","click","arr","e","dimension_Array","canvas_CanvasHelper","render","retina","isCache","center","bgColor","devicePixelRatio","canvas","getContext","aliaveCache","Map","updateSize","leftBottom","screenToWorldCoordinate","rightTop","round","offsetX","offsetY","layer","options","font","measureText","text","cache","image","set","color","clearRect","fillStyle","fillRect","style","screenPt","worldCoordinateToScreen","redraw","save","translate","clear","restore","getGeometry","radius","getRadius","beginPath","localPt","worldCoordinateToLocal","arc","_fillstroke","geo","getLayerType","POLYGON","closePath","mgeo","j","moveTo","quadraticCurveTo","getNorthWest","rect","accesible","has","deletePeddingLayer","imageData","position","shadowOffsetX","shadowOffsetY","shadowBlur","shadowColor","drawImage","log","setPeddingLayer","id","loadImageData","_setFontStyle","content","item","fontSize","getFontSize","space","verticleSpace","len","textAlign","maxLength","baseLine","fill","fillText","stroke","strokeText","fontStyle","highOptions","globalAlpha","fillOpacity","fillColor","fillRule","shadow","weight","setLineDash","dashArray","opacity","lineWidth","strokeStyle","lineCap","lineJoin","$1","slice","textBaseline","layer_Layer","userCache","createID","dashOffset","strict","_stage","dirtyData","keys","forEach","k","setOptions","updateAll","setHighlightOptions","getStage","addHighLightLayer","clearHighLightLayer","stage","addLayer","setRender","_render","addDraw","fire","container","transformVertex","removeLayer","clearBoundPath","geometry","level","union","MAX_SAFE_INTEGER","text_IText","defaultOptions","LEFT","MIDDLE","TEXT","firstPt","lastPt","lastRow","temp","fixContent","outline","computeOutline","rows","join","canvasHelper","getTextWidth","match","parseInt","geoms","render_Render","renderAll","isBatching","getZoom","cacheHelper","peddingLayers","Set","getCenterPoint","mainCanvas","getCanvasDom","zIndex","top","left","cacheCanvas","getViewBound","addCache","status","bounds","eachLayer","bbound","paddingLeft","paddingTop","paddingRight","paddingBottom","padding","right","bottom","getCache","_setRederAll","setRetina","setCache","setCenter","startDraw","layers","getLayers","drawPath","check","size","requestAnimationFrame","CIRCLE","POINT","drawCircle","POLYLINE","drawPolyline","RECTANGLE","drawRectangle","IMAGE","drawText","QUADRATICBERZIER","drawQuadraticBerzier","GROUP","drawGroup","setSubRender","glayer","getHighLightLayers","endDraw","renderCacheCanvas","setScale","updateCacheCanvas","zoom","offset","getOffsetToScreenCenter","origin","getOriginCenter","getScale","clearPart","delete","bool","stage_Stage","draggEnable","minZoom","maxZoom","zoomChange","getElementById","clientWidth","clientHeight","highLightLayers","_initContainer","_setOptions","_initEvents","_resize","filter","from","values","getCanvasHelper","cloneCanvas","toDataURL","isPointClosest","intersect","isIntersectWithBound","isWithinBound","transformScreenDistance","layerAdd","callback","arrayLayers","nzoom","_getValidateZoom","setView","setZoom","images","Image","src","addEventListener","zoom_w","zoom_h","floor","zoom_min","resize","setBatch","targetCenter","targetZoom","stepX","stepY","amination","cancelAnimationFrame","_amination","isNaN","appendChild","getCacheCanvasDom","_eventHandler","_listenerEvent","canvasDom","_formatDOMEvent","_zoom","_pan","delta","wheelDelta","detail","getOffset","preventDefault","lastPosition","clientX","clientY","touches","moveFunction","curPosition","deltaX","deltaY","upFunction","removeEventListener","_validEventType","getPos","ets","_fireEvent","targets","_findEventTargets","listens","includes","navigator","userAgent","dblclick","mousedown","mousemove","mouseup","mouseover","mouseleave","mousewheel","contextmenu","toLowerCase","circle_Circle","getDistance","setGeometry","distance","tol","vp","np","bCenter","substract","u","getSquareLength","layer_polyline_Polyline","clearnData","isMutiLine","nearestPoint","getNearestPoint","ddis","getMinDistance","layer_polygon_Polygon","rectangle_Rectangle","southWest","arguments","TypeError","corner1","corner2","imageLayer_ImageLayer","self","reject","_setImage","layerGroup_LayerGroup","layerGroup","__webpack_exports__","math_namespaceObject"],"mappings":"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","file":"index.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"xCanvas\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"xCanvas\"] = factory();\n\telse\n\t\troot[\"xCanvas\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","export interface XY {\r\n  x: number;\r\n  y: number;\r\n}\r\nexport interface Vertex {\r\n  [k: number]: number;\r\n}\r\nexport interface EventData {\r\n  target: any;\r\n  sourceTarget: any;\r\n  [k: string]: any;\r\n}\r\n\r\nexport enum GraphType {\r\n  POINT = 'POINT',\r\n  POLYLINE = 'POLYLINE',\r\n  POLYGON = 'POLYGON',\r\n  CIRCLE = 'CIRCLE',\r\n  RECTANGLE = 'RECTANGLE',\r\n  IMAGE = 'IMAGE',\r\n  GROUP = 'GROUP',\r\n  TEXT = 'TEXT',\r\n  QUADRATICBERZIER = 'QUADRATICBERZIER',\r\n}\r\n\r\nexport enum TextAlign {\r\n  LEFT = 'left',\r\n  CENTER = 'center',\r\n  RIGHT = 'right',\r\n}\r\n\r\nexport enum BaseLine {\r\n  TOP = 'top',\r\n  MIDDLE = 'middle',\r\n  BOTTOM = 'bottom',\r\n}\r\n","interface Handler {\r\n  fn: any;\r\n  ctx: any;\r\n}\r\nexport default class Evt {\r\n  public events: {[k: string]: Handler[]};\r\n  constructor() {\r\n    this.events = {};\r\n  }\r\n  public hasEvent(evt: string): boolean {\r\n    return this.events[evt] && this.events[evt].length > 0;\r\n  }\r\n  public on(evt: string, fn: object, context?: any) {\r\n    this.events[evt] = this.events[evt] || [];\r\n    // 减少内存\r\n    if (context === this) {\r\n      context = undefined;\r\n    }\r\n    const evts: string[] = evt.split('|');\r\n    for (const ev of evts) {\r\n      if (!this.events[ev].some((handle) => handle.fn === fn && handle.ctx === context)) {\r\n        this.events[ev].push({fn, ctx: context});\r\n      }\r\n    }\r\n    return this;\r\n  }\r\n  public once(evt: string, fn: object, context?: any) {\r\n    this.on(evt, fn, context);\r\n    const handler = () => {\r\n      this.off(evt, fn, context);\r\n      this.off(evt, handler, context);\r\n    };\r\n    this.on(evt, handler, context);\r\n  }\r\n  public fire(evt: string, data?: {sourceTarget?: any, [k: string]: any}) {\r\n    if (!this.events[evt] || this.events[evt].length === 0) {\r\n      return;\r\n    }\r\n    const event = Object.assign({}, data, {\r\n      type: evt,\r\n      target: this,\r\n      sourceTarget: data && data.sourceTarget || this,\r\n    });\r\n    for (const cl of this.events[evt]) {\r\n      cl.fn.call(cl.ctx, event);\r\n    }\r\n  }\r\n  public off(evt: string, fn?: any, context?: any) {\r\n    if (!fn) {\r\n      delete this.events[evt];\r\n    } else {\r\n      // 减少内存\r\n      if (context === this) {\r\n        context = undefined;\r\n      }\r\n      const listeners = this.events[evt];\r\n      if (listeners) {\r\n        const index = listeners.findIndex((cl: Handler) => cl.fn === fn && cl.ctx === context);\r\n        if (index > -1) {\r\n          listeners.splice(index, 1);\r\n        }\r\n      }\r\n    }\r\n  }\r\n  public listens(evt: string): boolean {\r\n    const listeners = this.events[evt];\r\n    if (listeners && listeners.length) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n}\r\n","import Constant from './constant';\r\nimport {XY} from '../typedef/geometry_type';\r\n\r\nexport default class Operation {\r\n  public static degreeToRadius(angle: number): number {\r\n    return Math.PI * angle / 180;\r\n  }\r\n  public static radiusToDegree(rad: number): number {\r\n    return rad / Math.PI * 180;\r\n  }\r\n  public static getDotMultiply(v0: XY, v1: XY): number {\r\n    return v0.x * v1.x + v0.y * v1.y;\r\n  }\r\n  public static getCrossMultiply(v0: XY, v1: XY): number {\r\n    return v0.x * v1.y - v0.y * v1.x;\r\n  }\r\n}\r\n","import Operation from './operation';\r\nimport { Vertex } from '../../typeof/typeof';\r\n\r\nexport default class Vector2 {\r\n  public static lerp(vec1: Vector2, vec2: Vector2, lerp: number): Vector2 {\r\n    const dir: Vector2 = new Vector2(vec2.x - vec1.x, vec2.y - vec2.y);\r\n    return vec1.add(dir.scale(lerp));\r\n  }\r\n  public x: number;\r\n  public y: number;\r\n  constructor(a: any, b?: number) {\r\n    if (typeof a === 'number' && typeof b === 'number') {\r\n      this.x = a;\r\n      this.y = b;\r\n    } else if (a instanceof Array && a.length > 1 && b === undefined) {\r\n      this.x = a[0];\r\n      this.y = a[1];\r\n    } else {\r\n      if (!a.hasOwnProperty('x') || !a.hasOwnProperty('y')) {\r\n        console.error('Vector constructor call a error.');\r\n      }\r\n      this.x = a.x;\r\n      this.y = a.y;\r\n    }\r\n  }\r\n  public add(vector2: Vector2): Vector2 {\r\n    this.x += Number(vector2.x);\r\n    this.y += Number(vector2.y);\r\n    return this;\r\n  }\r\n  public substract(vector2: Vector2): Vector2 {\r\n    this.x -= Number(vector2.x);\r\n    this.y -= Number(vector2.y);\r\n    return this;\r\n  }\r\n  public normalize(): Vector2 {\r\n    const dis = this.getModelLength();\r\n    if (dis === 0) {\r\n      return new Vector2(0, 0);\r\n    }\r\n    return new Vector2(this.x / dis, this.y / dis);\r\n  }\r\n  public clone(): Vector2 {\r\n    return new Vector2(this.x, this.y);\r\n  }\r\n  public rotate(angle: number): Vector2 {\r\n    const rotatedRad: number = Operation.degreeToRadius(angle);\r\n    const x = this.x * Math.cos(rotatedRad) - this.y * Math.sin(rotatedRad);\r\n    const y = this.x * Math.sin(rotatedRad) + this.y * Math.cos(rotatedRad);\r\n    this.x = x;\r\n    this.y = y;\r\n    return this;\r\n  }\r\n  public scale(scale_x: number, scale_y?: number): Vector2 {\r\n    this.x *= scale_x;\r\n    this.y *= scale_y || scale_x;\r\n    return this;\r\n  }\r\n  public getSquareLength(): number {\r\n    return this.x ** 2 + this.y ** 2;\r\n  }\r\n  public getModelLength(): number {\r\n    return Math.sqrt(this.x ** 2 + this.y ** 2);\r\n  }\r\n  public toArray(): Vertex {\r\n    return [this.x, this.y];\r\n  }\r\n}\r\n","export default {\r\n  Zero: 1e-5,\r\n  PI: Math.PI,\r\n  PI2: Math.PI * 2,\r\n};\r\n","export enum Geometry_Type {\r\n  VECTOR,\r\n  LINE,\r\n  BOX,\r\n}\r\nexport interface XY {\r\n  x: number;\r\n  y: number;\r\n}\r\n\r\nexport interface Vertex {\r\n  [k: number]: number;\r\n}\r\n","import Constant from '../math/constant';\r\nimport {XY, Vertex} from '../typedef/geometry_type';\r\nimport Vector2 from '../math/vector2';\r\nimport Operation from './operation';\r\nimport Bound from './bound';\r\n\r\nexport default class Base {\r\n  public static isZero(n: number, tolerance?: number): boolean {\r\n    return typeof tolerance !== 'undefined' ? Math.abs(n) <= Math.abs(tolerance) : Math.abs(n) <= Constant.Zero;\r\n  }\r\n  public static isSamePoint(pt1: any, pt2: any): boolean {\r\n    const p1: Vertex = Array.isArray(pt1) ? pt1 : [pt1.x, pt1.y];\r\n    const p2: Vertex = Array.isArray(pt2) ? pt2 : [pt2.x, pt2.y];\r\n    return this.isZero(p1[0] - p2[0]) && this.isZero(p1[1] - p2[1]);\r\n  }\r\n  public static getDistance(p1: Vertex, p2: Vertex): number {\r\n    return Math.sqrt((p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2);\r\n  }\r\n  public static getSquareDistance(pt1: Vertex, pt2: Vertex): number {\r\n    return (pt1[0] - pt2[0]) ** 2 + (pt1[1] - pt2[1]) ** 2;\r\n  }\r\n  public static transformPointToArray(pt: any): Vertex {\r\n    return Array.isArray(pt) ? pt : [pt.x, pt.y];\r\n  }\r\n  public static transformPointToXY(pt: any): XY {\r\n    return Array.isArray(pt) ? {x: pt[0], y: pt[1]} : pt;\r\n  }\r\n  public static transformPointsToArray(pts: any): Vertex[] {\r\n    const result: Vertex[] = [];\r\n    for (const pt of pts) {\r\n      result.push(this.transformPointToArray(pt));\r\n    }\r\n    return result;\r\n  }\r\n  public static transformPointsToXY(pts: any): XY[] {\r\n    const result: XY[] = [];\r\n    for (const pt of pts) {\r\n      result.push(this.transformPointToXY(pt));\r\n    }\r\n    return result;\r\n  }\r\n  /**\r\n   * 返回点集的Bound\r\n   * @param pts 点集\r\n   */\r\n  public static getBoundOfPoints(pts: Vertex[]): Bound {\r\n    const xs: number[] = pts.map((pt) => pt[0]);\r\n    const ys: number[] = pts.map((pt) => pt[1]);\r\n    const minX = Math.min(...xs);\r\n    const maxX = Math.max(...xs);\r\n    const minY = Math.min(...ys);\r\n    const maxY = Math.max(...ys);\r\n    return new Bound(minX, minY, Math.abs(maxX - minX), Math.abs(maxY - minY));\r\n  }\r\n  /**\r\n   * 返回p1到p2的向量\r\n   * @param p1 点p1\r\n   * @param p2 点p2\r\n   */\r\n  public static getDirectionVec(p1: Vertex, p2: Vertex): Vector2 {\r\n    return new Vector2(p2[0] - p1[0], p2[1] - p1[1]);\r\n  }\r\n  public static isLeftOfLine(pt: Vertex, v1: Vertex, v2: Vertex): boolean {\r\n    let [bottomPt, topPt] = [new Vector2(v1), new Vector2(v2)];\r\n    if (bottomPt.y > topPt.y) {\r\n      [bottomPt, topPt] = [topPt, bottomPt];\r\n    }\r\n    const base: Vector2 = new Vector2(topPt.x - bottomPt.x, topPt.y - bottomPt.y);\r\n    const comVec: Vector2 = new Vector2(pt[0] - bottomPt.x, pt[1] - bottomPt.y);\r\n    return Operation.getCrossMultiply(base, comVec) > 0;\r\n  }\r\n  /**\r\n   * 判断向量vec1、vec2是否在基准向量base的两侧\r\n   * @param {Vector2} base\r\n   * @param {Vector2} vec1\r\n   * @param {Vector2} vec2\r\n   */\r\n  public static isBothSide(base: Vector2, vec1: Vector2, vec2: Vector2): boolean {\r\n    return (Operation.getCrossMultiply(base, vec1) * Operation.getCrossMultiply(base, vec2)) < 0;\r\n  }\r\n}\r\n","import { Vertex } from '../typedef/geometry_type';\r\nimport Base from './base';\r\nimport Vector2 from './vector2';\r\n\r\nexport default class Bound {\r\n  /**\r\n   * 判断两个Bound是否相交\r\n   * @param bound1 Bound\r\n   * @param bound2 Bound\r\n   */\r\n  public static isOverlaped(bound1: Bound, bound2: Bound): boolean {\r\n    return bound1.isOverlaped(bound2);\r\n  }\r\n  public x: number;\r\n  public y: number;\r\n  public width: number;\r\n  public height: number;\r\n  constructor(x: any, y: any, width: number = 0, height: number = 0) {\r\n    if (Array.isArray(x) && Array.isArray(y)) {\r\n      const minX = Math.min(x[0], y[0]);\r\n      const minY = Math.min(x[1], y[1]);\r\n      const maxX = Math.max(x[0], y[0]);\r\n      const maxY = Math.max(x[1], y[1]);\r\n      this.x = minX;\r\n      this.y = minY;\r\n      this.width = Math.abs(maxX - minX);\r\n      this.height = Math.abs(maxY - minY);\r\n    } else {\r\n      this.x = x;\r\n      this.y = y;\r\n      this.width = width;\r\n      this.height = height;\r\n    }\r\n  }\r\n  /**\r\n   * clone新的bound\r\n   */\r\n  public clone(): Bound {\r\n    return new Bound(this.x, this.y, this.width, this.height);\r\n  }\r\n  /**\r\n   * 返回Bound属性\r\n   */\r\n  public getBound() {\r\n    return {x: this.x, y: this.y, width: this.width, height: this.height};\r\n  }\r\n  /**\r\n   * 获取Bound的中心点\r\n   */\r\n  public getCenter(): Vertex {\r\n    return [this.x + this.width / 2, this.y + this.height / 2];\r\n  }\r\n  /**\r\n   * 获取Bound的东北角点\r\n   */\r\n  public getNorthEast(): Vertex {\r\n    return [this.x + this.width, this.y + this.height];\r\n  }\r\n  /**\r\n   * 获取Bound的西南角坐标\r\n   */\r\n  public getSouthWest(): Vertex {\r\n    return [this.x, this.y];\r\n  }\r\n  /**\r\n   * 返回bound的顶点\r\n   */\r\n  public getVetexs(): Vertex[] {\r\n    return [[this.x, this.y], [this.x, this.y + this.height], [this.x + this.width, this.y + this.height], [this.x + this.width, this.y]];\r\n  }\r\n  /**\r\n   * 判断与另一个Bound是否相交\r\n   * @param bound Bound\r\n   */\r\n  public isOverlaped(bound: Bound): boolean {\r\n    const center0 = this.getCenter();\r\n    const center1 = bound.getCenter();\r\n    return Math.abs(center1[0] - center0[0]) < (this.width + bound.width) / 2 &&\r\n      Math.abs(center1[1] - center0[1]) < (this.height + bound.height) / 2;\r\n  }\r\n  /**\r\n   * 点或者bound是否在Bound内\r\n   * @param a\r\n   */\r\n  public contain(a: any ): boolean {\r\n    if (a instanceof Bound) {\r\n      for (const v of a.getVetexs()) {\r\n        if (!this.contain(v)) {\r\n          return false;\r\n        }\r\n      }\r\n      return true;\r\n    }\r\n    return a[0] > this.x && a[1] > this.y && a[0] < (this.x + this.width) && a[1] < (this.y + this.height);\r\n  }\r\n  /**\r\n   * 扩展union\r\n   * @param bound Bound\r\n   */\r\n  public union(bound: Bound): Bound {\r\n    const minX = Math.min(this.x, bound.x);\r\n    const minY = Math.min(this.y, bound.y);\r\n    const maxX = Math.max(this.x + this.width, bound.x + bound.width);\r\n    const maxY = Math.max(this.y + this.height, bound.y + bound.height);\r\n    this.x = minX;\r\n    this.y = minY;\r\n    this.width = maxX - minX;\r\n    this.height = maxY - minY;\r\n    return this;\r\n  }\r\n  /**\r\n   * 缩放bound\r\n   * @param dx number\r\n   * @param dy number\r\n   */\r\n  public expand(dx: number, dy?: number): Bound {\r\n    this.width += dx * 2;\r\n    this.x -= dx;\r\n    if (dy !== undefined) {\r\n      this.y -= dy;\r\n      this.height += dy * 2;\r\n    } else {\r\n      this.y -= dx;\r\n      this.height += dx * 2;\r\n    }\r\n    return this;\r\n  }\r\n  /**\r\n   * 判断线段是否与Bound相交\r\n   * @param p1 点p1\r\n   * @param p2 点p2\r\n   */\r\n  public isIntersectOfSegment(p1: Vertex, p2: Vertex): boolean {\r\n    const bound = Base.getBoundOfPoints([p1, p2]);\r\n    if (!bound.isOverlaped(this)) {\r\n      return false;\r\n    } else if (this.contain(p1) || this.contain(p2)) {\r\n      return true;\r\n    } else {\r\n      const base: Vector2 = Base.getDirectionVec(p1, p2);\r\n      const vertexs: Vertex[] = this.getVetexs();\r\n      for (let i = 1; i < vertexs.length; i++) {\r\n        const preVec: Vector2 = Base.getDirectionVec(p1, vertexs[i - 1]);\r\n        const curVec: Vector2 = Base.getDirectionVec(p1, vertexs[i]);\r\n        if (Base.isBothSide(base, preVec, curVec)) {\r\n          return true;\r\n        }\r\n      }\r\n      return false;\r\n    }\r\n  }\r\n}\r\n","import Vector2 from '../math/vector2';\r\nimport Bound from '../math/bound';\r\nimport { XY, Vertex } from '../typedef/geometry_type';\r\nimport Operation from '../math/operation';\r\nimport Base from '../math/base';\r\n\r\nexport default class Line {\r\n  /**\r\n   * 求点到直线的垂足\r\n   * @param pt 目标点\r\n   * @param v0 直线起点\r\n   * @param v1 直线终点\r\n   */\r\n  public static getPedalPointOfLine(p: XY | Vertex, v0: XY | Vertex, v1: XY | Vertex): Vector2 {\r\n    [p, v0, v1] = Base.transformPointsToXY([p, v0, v1]);\r\n    const vec0: Vector2 = new Vector2(p.x - v0.x, p.y - v0.y);\r\n    const vec1: Vector2 = new Vector2(v1.x - v0.x, v1.y - v0.y);\r\n    const dot: number = Operation.getDotMultiply(vec0, vec1);\r\n    const dis: number = dot / vec1.getModelLength();\r\n    return new Vector2(v0.x, v0.y).add(vec1.normalize().scale(dis));\r\n  }\r\n  /**\r\n   * 返回到线段上最近的点\r\n   * @param p 待测点\r\n   * @param v0 线段起点\r\n   * @param v1 线段终点\r\n   */\r\n  public static getNearestPointToSegment(p: XY | Vertex, v0: XY | Vertex, v1: XY | Vertex): Vertex {\r\n    [p, v0, v1] = Base.transformPointsToArray([p, v0, v1]);\r\n    const pedal: Vector2 = this.getPedalPointOfLine(p, v0, v1);\r\n    if (this.isPointAtSegment(pedal, v0, v1)) {\r\n      return [pedal.x, pedal.y];\r\n    } else {\r\n      const dis1 = Base.getSquareDistance(p, v0);\r\n      const dis2 = Base.getSquareDistance(p, v1);\r\n      return dis1 < dis2 ? Base.transformPointToArray(v0) : Base.transformPointToArray(v1);\r\n    }\r\n  }\r\n  /**\r\n   * 求点到直线的距离\r\n   * @param pt 目标点\r\n   * @param v0 直线起点\r\n   * @param v1 直线终点\r\n   */\r\n  public static getDistanceToLine(p: XY | Vertex, v0: XY | Vertex, v1: XY | Vertex) {\r\n    [p, v0, v1] = Base.transformPointsToArray([p, v0, v1]);\r\n    const vec0: Vector2 = new Vector2(p[0] - v0[0], p[1] - v0[1]);\r\n    const vec1: Vector2 = new Vector2(v1[0] - v0[0], v1[1] - v0[1]);\r\n    const cross: number = Operation.getCrossMultiply(vec0, vec1);\r\n    return Math.abs(cross / vec1.getModelLength());\r\n  }\r\n  /**\r\n   * 判断点在直线上\r\n   * @param {XY | Vertex} p\r\n   * @param {XY | Vertex} v0\r\n   * @param {XY | Vertex} v1\r\n   * @param {number} tolerance\r\n   */\r\n  public static isPointAtLine(p: XY | Vertex, v0: XY | Vertex, v1: XY | Vertex, tolerance?: number): boolean {\r\n    [p, v0, v1] = Base.transformPointsToArray([p, v0, v1]);\r\n    const dir: Vector2 = new Vector2(v1[0] - v0[0], v1[1] - v0[1]);\r\n    const vec1 = new Vector2(p[0] - v0[0], p[1] - v0[1]);\r\n    const cross = Operation.getCrossMultiply(dir, vec1);\r\n    return Base.isZero(cross, tolerance);\r\n  }\r\n  /**\r\n   * 判断点是否在线段上\r\n   * @param p 待测点\r\n   * @param v0 线段起点\r\n   * @param v1 线段终点\r\n   * @param tolerance 容差\r\n   */\r\n  public static isPointAtSegment(p: XY | Vertex, v0: XY | Vertex, v1: XY | Vertex, tolerance?: number): boolean {\r\n    [p, v0, v1] = Base.transformPointsToArray([p, v0, v1]);\r\n    return (p[0] - v0[0]) * (p[0] - v1[0]) <= 0 && (p[1] - v0[1]) * (p[1] - v1[1]) <= 0 && this.isPointAtLine(p, v0, v1);\r\n  }\r\n  /**\r\n   * 判断两条直线是否平行(包含共线)\r\n   * @param {XY | Vertex} p0\r\n   * @param {XY | Vertex} p1\r\n   * @param {XY | Vertex} v0\r\n   * @param {XY | Vertex} v1\r\n   */\r\n  public static isParalled(p0: XY | Vertex, p1: XY | Vertex, v0: XY | Vertex, v1: XY | Vertex, tolerance?: number): boolean {\r\n    [p0, p1, v0, v1] = Base.transformPointsToArray([p0, p1, v0, v1]);\r\n    const dir1: Vector2 = new Vector2(p1[0] - p0[0], p1[1] - p0[1]);\r\n    const dir2: Vector2 = new Vector2(v1[0] - v0[0], v1[1] - v0[1]);\r\n    const cross: number = Operation.getCrossMultiply(dir1, dir2);\r\n    return Base.isZero(cross, tolerance);\r\n  }\r\n  /**\r\n   * 判断两条直线是否共线\r\n   * @param {XY | Vertex} p0\r\n   * @param {XY | Vertex} p1\r\n   * @param {XY | Vertex} v0\r\n   * @param {XY | Vertex} v1\r\n   */\r\n  public static isCollinear(p0: XY | Vertex, p1: XY | Vertex, v0: XY | Vertex, v1: XY | Vertex, tolerance?: number): boolean {\r\n    [p0, p1, v0, v1] = Base.transformPointsToArray([p0, p1, v0, v1]);\r\n    const dir1: Vector2 = new Vector2(p1[0] - p0[0], p1[1] - p0[1]);\r\n    const dir2: Vector2 = new Vector2(v1[0] - v0[0], v1[1] - v0[1]);\r\n    const dir3: Vector2 = new Vector2(p0[0] - v0[0], p1[1] - v0[1]);\r\n    const cross1: number = Operation.getCrossMultiply(dir1, dir2);\r\n    const cross2: number = Operation.getCrossMultiply(dir1, dir3);\r\n    return Base.isZero(cross1, tolerance) && Base.isZero(cross2, tolerance);\r\n  }\r\n  /**\r\n   * 判断两条直线是否相交 Reference\r\n   * @param {XY | Vertex} p0\r\n   * @param {XY | Vertex} p1\r\n   * @param {XY | Vertex} v0\r\n   * @param {XY | Vertex} v1\r\n   */\r\n  public static isIntersect(p0: XY | Vertex, p1: XY | Vertex, v0: XY | Vertex, v1: XY | Vertex, tolerance?: number): boolean {\r\n    return !this.isParalled(p0, p1, v0, v1, tolerance);\r\n  }\r\n  /**\r\n   * 计算两直线的交点 Reference https://blog.csdn.net/yan456jie/article/details/52469130\r\n   * @param {XY | Vertex} p0\r\n   * @param {XY | Vertex} p1\r\n   * @param {XY | Vertex} v0\r\n   * @param {XY | Vertex} v1\r\n   */\r\n  public static getIntersectPt(p0: XY | Vertex, p1: XY | Vertex, v0: XY | Vertex, v1: XY | Vertex) {\r\n    if (this.isParalled(p0, p1, v0, v1)) {\r\n      if (this.isCollinear(p0, p1, v0, v1)) {\r\n        console.warn('These lines is collinear');\r\n        return;\r\n      }\r\n      console.warn('These lines is paralled');\r\n      return;\r\n    }\r\n    [p0, p1, v0, v1] = Base.transformPointsToArray([p0, p1, v0, v1]);\r\n    const vec1: Vector2 = new Vector2(p1[0] - p0[0], p1[1] - p0[1]);\r\n    const vec2: Vector2 = new Vector2(v1[0] - v0[0], v1[1] - v0[1]);\r\n    const vec3: Vector2 = new Vector2(v0[0] - p0[0], v0[1] - p0[1]);\r\n    const vec4: Vector2 = new Vector2(v1[0] - p0[0], v1[1] - p0[1]);\r\n    const l1: number = Math.abs(Operation.getCrossMultiply(vec1, vec3));\r\n    const l2: number = Math.abs(Operation.getCrossMultiply(vec1, vec4));\r\n    let ratio = 0;\r\n    // 线段相交的情况\r\n    if (Base.isBothSide(vec1, vec3, vec4)) {\r\n      ratio = l1 / (l1 + l2);\r\n    } else {\r\n      ratio = l1 / (l1 - l2);\r\n    }\r\n    return new Vector2(v0[0], v0[1]).clone().add(vec2.clone().scale(ratio));\r\n  }\r\n  /**\r\n   * 判断两条线段是否相交\r\n   * @param {XY | Vertex} p0\r\n   * @param {XY | Vertex} p1\r\n   * @param {XY | Vertex} v0\r\n   * @param {XY | Vertex} v1\r\n   */\r\n  public static isIntersectOfSegment(p0: XY | Vertex, p1: XY | Vertex, v0: XY | Vertex, v1: XY | Vertex, tolerance?: number): boolean {\r\n    [p0, p1, v0, v1] = Base.transformPointsToArray([p0, p1, v0, v1]);\r\n    const base1: Vector2 = new Vector2(p1[0] - p0[0], p1[1] - p0[1]);\r\n    const base2: Vector2 = new Vector2(v1[0] - v0[0], v1[1] - v0[1]);\r\n    const vec1: Vector2 = new Vector2(v0[0] - p0[0], v0[1] - p0[1]);\r\n    const vec2: Vector2 = new Vector2(v1[0] - p0[0], v1[1] - p0[1]);\r\n    const vec3: Vector2 = new Vector2(p0[0] - v0[0], p0[1] - v0[1]);\r\n    const vec4: Vector2 = new Vector2(p1[0] - v0[0], p1[1] - v0[1]);\r\n    return Base.isBothSide(base1, vec1, vec2) && Base.isBothSide(base2, vec3, vec4);\r\n  }\r\n  public v0: Vector2;\r\n  public v1: Vector2;\r\n  constructor(v0: XY | Vertex, v1: XY | Vertex) {\r\n    v0 = Base.transformPointToArray(v0);\r\n    v1 = Base.transformPointToArray(v1);\r\n    this.v0 = new Vector2(v0[0], v0[1]);\r\n    this.v1 = new Vector2(v1[0], v1[1]);\r\n  }\r\n  /**\r\n   * 获得直线的方向向量\r\n   */\r\n  public getDirVector(): Vector2 {\r\n    const x: number = this.v1.x - this.v0.x;\r\n    const y: number = this.v1.y - this.v0.y;\r\n    const vec: Vector2 = new Vector2(x, y);\r\n    return vec;\r\n  }\r\n  /**\r\n   * 获得直线方向向量的单位向量\r\n   */\r\n  public getDirection(): Vector2 {\r\n    const vec: Vector2 = this.getDirVector();\r\n    return vec.normalize();\r\n  }\r\n  /**\r\n   * 获得直线的长度\r\n   */\r\n  public getLineLength() {\r\n    const vec: Vector2 = this.getDirVector();\r\n    return vec.getModelLength();\r\n  }\r\n  /**\r\n   * 返回线段的Bound\r\n   */\r\n  public getBound(): Bound {\r\n    const x: number = Math.min(this.v0.x, this.v1.x);\r\n    const y: number = Math.min(this.v0.y, this.v1.y);\r\n    const w: number = Math.abs(this.v1.x - this.v0.x);\r\n    const h: number = Math.abs(this.v1.y - this.v0.y);\r\n    return new Bound(x, y, w, h);\r\n  }\r\n  /**\r\n   * 判断点在直线上\r\n   * @param {XY} pt\r\n   * @param {number} tolerance\r\n   */\r\n  public isPointAtLine(pt: XY | Vertex, tolerance?: number): boolean {\r\n    pt = Base.transformPointToArray(pt);\r\n    const dir: Vector2 = this.getDirVector();\r\n    const vec1 = new Vector2(pt[0] - this.v0.x, pt[1] - this.v1.y);\r\n    const cross = Operation.getCrossMultiply(dir, vec1);\r\n    return Base.isZero(cross, tolerance);\r\n  }\r\n  /**\r\n   * 判断两条直线是否平行(包含共线)\r\n   * @param {Line} line\r\n   */\r\n  public isParalled(line: Line, tolerance?: number): boolean {\r\n    const dir1: Vector2 = this.getDirection();\r\n    const dir2: Vector2 = line.getDirection();\r\n    const cross: number = Operation.getCrossMultiply(dir1, dir2);\r\n    return Base.isZero(cross, tolerance);\r\n  }\r\n  /**\r\n   * 判断两条直线是否共线\r\n   * @param {Line} line\r\n   */\r\n  public isCollinear(line: Line, tolerance?: number): boolean {\r\n    const dir1: Vector2 = line.getDirection();\r\n    const dir2: Vector2 = new Vector2(line.v0.x - this.v0.x, line.v0.y - this.v0.y);\r\n    const cross = Operation.getCrossMultiply(dir1, dir2);\r\n    return this.isParalled(line, tolerance) && Base.isZero(cross, tolerance);\r\n  }\r\n  /**\r\n   * 判断两条直线是否相交\r\n   * @param {Line} line\r\n   */\r\n  public isIntersect(line: Line, tolerance?: number): boolean {\r\n    return !this.isParalled(line, tolerance);\r\n  }\r\n  /**\r\n   * 计算两直线的交点 Reference https://blog.csdn.net/yan456jie/article/details/52469130\r\n   * @param {Line} line\r\n   */\r\n  public getIntersectPt(line: Line) {\r\n    if (this.isParalled(line)) {\r\n      if (this.isCollinear(line)) {\r\n        console.warn('These lines is collinear');\r\n        return;\r\n      }\r\n      console.warn('These lines is paralled');\r\n      return;\r\n    }\r\n    const vec1: Vector2 = this.getDirVector();\r\n    const vec2: Vector2 = line.getDirVector();\r\n    const vec3: Vector2 = new Vector2(line.v0.x - this.v0.x, line.v0.y - this.v0.y);\r\n    const vec4: Vector2 = new Vector2(line.v1.x - this.v0.x, line.v1.y - this.v0.y);\r\n    const l1: number = Math.abs(Operation.getCrossMultiply(vec1, vec3));\r\n    const l2: number = Math.abs(Operation.getCrossMultiply(vec1, vec4));\r\n    let ratio = 0;\r\n    // 线段相交的情况\r\n    if (Base.isBothSide(vec1, vec3, vec4)) {\r\n      ratio = l1 / (l1 + l2);\r\n    } else {\r\n      ratio = l1 / (l1 - l2);\r\n    }\r\n    return line.v0.clone().add(vec2.clone().scale(ratio));\r\n  }\r\n  /**\r\n   * 判断两条线段是否相交\r\n   * @param {Line} line\r\n   */\r\n  public isIntersectOfSegment(line: Line): boolean {\r\n    const base1: Vector2 = this.getDirVector();\r\n    const base2: Vector2 = line.getDirVector();\r\n    const vec1: Vector2 = new Vector2(line.v0.x - this.v0.x, line.v0.y - this.v0.y);\r\n    const vec2: Vector2 = new Vector2(line.v1.x - this.v0.x, line.v1.y - this.v0.y);\r\n    const vec3: Vector2 = new Vector2(this.v0.x - line.v0.x, this.v0.y - line.v0.y);\r\n    const vec4: Vector2 = new Vector2(this.v1.x - line.v0.x, this.v1.y - line.v0.y);\r\n    return Base.isBothSide(base1, vec1, vec2) && Base.isBothSide(base2, vec3, vec4);\r\n  }\r\n  /**\r\n   * 线段是否与Bound相交\r\n   * @param p0 端点1\r\n   * @param p1 端点2\r\n   */\r\n  public isIntersectOfBound(bound: Bound): boolean {\r\n    return bound.isIntersectOfSegment(Base.transformPointToArray(this.v0), Base.transformPointToArray(this.v1));\r\n  }\r\n}\r\n","import { XY, Vertex } from '../typedef/geometry_type';\r\nimport Bound from '../math/bound';\r\nimport Base from '../math/base';\r\nimport Line from './line';\r\n\r\nexport default class Polyline {\r\n  public readonly coordinates: Vertex[] | Vertex[][];\r\n  constructor(coordinates: Vertex[] | Vertex[][]) {\r\n    this.coordinates = coordinates;\r\n  }\r\n  public getBound(): Bound {\r\n    let minX = Number.MAX_VALUE;\r\n    let minY = Number.MAX_VALUE;\r\n    let maxX = -Number.MAX_VALUE;\r\n    let maxY = -Number.MAX_VALUE;\r\n    const flatList = this.coordinates.flat();\r\n    if (Array.isArray(flatList[0])) {\r\n      for (const coords of this.coordinates) {\r\n        const geos: any = coords;\r\n        for (const coordinate of geos) {\r\n          minX = Math.min(minX, coordinate[0]);\r\n          minY = Math.min(minY, coordinate[1]);\r\n          maxX = Math.max(maxX, coordinate[0]);\r\n          maxY = Math.max(maxY, coordinate[1]);\r\n        }\r\n      }\r\n    } else {\r\n      for (const coordinate of this.coordinates) {\r\n        const pt: Vertex = coordinate as Vertex;\r\n        minX = Math.min(minX, pt[0]);\r\n        minY = Math.min(minY, pt[1]);\r\n        maxX = Math.max(maxX, pt[0]);\r\n        maxY = Math.max(maxY, pt[1]);\r\n      }\r\n    }\r\n    \r\n    return new Bound(minX, minY, maxX - minX, maxY - minY);\r\n  }\r\n  public getNearestPoint(p: XY | Vertex) {\r\n    p = Base.transformPointToArray(p);\r\n    const nearestPoints: Array<{dis: number, pos: Vertex}> = [];\r\n    const flatList = this.coordinates.flat();\r\n    if (Array.isArray(flatList[0])) {\r\n      for (const coords of this.coordinates) {\r\n        const geos = coords as Vertex[];\r\n        for (let i = 0; i < geos.length - 1; i++) {\r\n          const pos = Line.getNearestPointToSegment(p, geos[i], geos[i + 1]);\r\n          const dis = Base.getSquareDistance(p, pos);\r\n          nearestPoints.push({dis, pos});\r\n        }\r\n      }\r\n    } else {\r\n      const coords = this.coordinates as Vertex[];\r\n      for (let i = 0; i < coords.length - 1; i++) {\r\n        const pos = Line.getNearestPointToSegment(p, coords[i], coords[i + 1]);\r\n        const dis = Base.getSquareDistance(p, pos);\r\n        nearestPoints.push({dis, pos});\r\n      }\r\n    }\r\n    nearestPoints.sort((a, b) => {\r\n      return a.dis - b.dis;\r\n    });\r\n    return nearestPoints[0].pos;\r\n  }\r\n  protected transformToArray(coordinates: Array<XY | Vertex>): Vertex[] {\r\n    return Base.transformPointsToArray(coordinates);\r\n  }\r\n}\r\n","import Polyline from './polyline';\r\nimport Line from './line';\r\nimport { XY, Vertex } from '../typedef/geometry_type';\r\nimport Bound from '../math/bound';\r\nimport Base from '../math/base';\r\n\r\nexport default class Polygon extends Polyline {\r\n  constructor(coordinates: Vertex[] | Vertex[][]) {\r\n    super(coordinates);\r\n    this._cleanData();\r\n  }\r\n  /**\r\n   * isPointAtPolygon\r\n    p: Vertex, \r\n    coords: Vertex[]\r\n  */\r\n  public isPointAtPolygon(p: Vertex, coords: Vertex[]) {\r\n    let count = 0;\r\n    for (let i = 0; i < coords.length - 1; ++i) {\r\n      const curPt: Vertex = coords[i];\r\n      const nextPt: Vertex = coords[i + 1];\r\n      if (this._isWithInTrapezoid(p, curPt, nextPt)) {\r\n        count++;\r\n      }\r\n    }\r\n    return count % 2 === 1;\r\n  }\r\n  public contain(pt: XY | Vertex, tolerance: number = 2): boolean {\r\n    pt = Base.transformPointToArray(pt);\r\n    const bound: Bound = this.getBound();\r\n    if (!bound.contain(pt)) {\r\n      return false;\r\n    }\r\n    const flatList = this.coordinates.flat();\r\n    if (Array.isArray(flatList[0])) {\r\n      for (const coords of this.coordinates) {\r\n        const geos = coords as Vertex[];\r\n        if (geos.length === 2) {\r\n          const dis = Line.getDistanceToLine(pt, geos[0], geos[1]);\r\n          if (dis < tolerance) {\r\n            return true;\r\n          }\r\n        } else if (this.isPointAtPolygon(pt, geos)) {\r\n          return true;\r\n        }\r\n      }\r\n    } else{\r\n      return this.isPointAtPolygon(pt, this.coordinates as Vertex[]);\r\n    }\r\n    return false;\r\n  }\r\n  private _cleanData() {\r\n    const flatList = this.coordinates.flat();\r\n    if (Array.isArray(flatList[0])) { // 多面\r\n      for (const coords of this.coordinates) {\r\n        const geos: any = coords;\r\n        if (geos.length > 2 && !Base.isSamePoint(geos[0], geos[geos.length - 1])) {\r\n          geos.push(coords[0]);\r\n        }\r\n      }\r\n    } else {\r\n      const coords = this.coordinates as Vertex[];\r\n      if (!Base.isSamePoint(coords[0], coords[coords.length - 1])) {\r\n        coords.push(coords[0]);\r\n      }\r\n    }\r\n  }\r\n  private _isWithInTrapezoid(pt: Vertex, curPt: Vertex, nextPt: Vertex): boolean {\r\n    const maxY: number = Math.max(curPt[1], nextPt[1]);\r\n    const minY: number = Math.min(curPt[1], nextPt[1]);\r\n    return Base.isLeftOfLine(pt, curPt, nextPt) && pt[1] > minY && pt[1] < maxY;\r\n  }\r\n}\r\n","import { XY } from '../typeof/typeof';\r\n\r\nexport default class Util {\r\n  public static createID(): string {\r\n    return 'xxxxxxxxxxxx-6xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\r\n      const r = Math.random() * 16 | 0;\r\n      const v = c === 'x' ? r : (r & 0x3 | 0x8);\r\n      return v.toString(16);\r\n    });\r\n  }\r\n  public static transformToXY(coord: number[]): XY {\r\n    if (coord.length < 2) {\r\n      throw new Error('coordinate length less than two...');\r\n    }\r\n    return {x: coord[0], y: coord[1]};\r\n  }\r\n  public static transformToArray(xy: XY): number[] {\r\n    return [xy.x, xy.y];\r\n  }\r\n  public static transformToXYPath(path: number[][]): XY[] {\r\n    const newPath: XY[] = [];\r\n    for (const vertex of path) {\r\n      newPath.push(this.transformToXY(vertex));\r\n    }\r\n    return newPath;\r\n  }\r\n  public static transformToArrayPath(path: XY[]): number[][] {\r\n    const newPath: number[][] = [];\r\n    for (const xy of path) {\r\n      newPath.push(this.transformToArray(xy));\r\n    }\r\n    return newPath;\r\n  }\r\n  public static loadImageByBlob(url: string): Promise<any> {\r\n    const xhr: XMLHttpRequest = new XMLHttpRequest();\r\n    xhr.open('GET', url, true);\r\n    xhr.responseType = 'blob';\r\n    xhr.send();\r\n    return new Promise((resolve) => {\r\n      xhr.onload = function() {\r\n        resolve(this.response);\r\n      };\r\n    });\r\n  }\r\n  public static downLoadByBase64String(base64: string, fileName: string = `newFile${Date.now()}`) {\r\n    const parts = base64.split(';base64,');\r\n    const contentType = parts[0].split(':')[1];\r\n    const raw = window.atob(parts[1]);\r\n    const rawLength = raw.length;\r\n    const uInt8Array = new Uint8Array(rawLength);\r\n    for (let i = 0; i < rawLength; ++i) {\r\n      uInt8Array[i] = raw.charCodeAt(i);\r\n    }\r\n    const blob: Blob = new Blob([uInt8Array], {type: contentType});\r\n    const a: HTMLAnchorElement = document.createElement('a');\r\n    a.href = URL.createObjectURL(blob);\r\n    a.download = fileName;\r\n    a.click();\r\n  }\r\n  public static dimension_Array(arr: any[]): number {\r\n    if (arr instanceof Array) {\r\n        return Math.max(...arr.map((e) => {\r\n            return 1 + Util.dimension_Array(e);\r\n        }));\r\n    } else {\r\n        return 0;\r\n    }\r\n  }\r\n}\r\n","import { Vertex, GraphType } from '../typeof/typeof';\r\nimport Layer from '../layer/layer';\r\nimport Circle from '../layer/circle';\r\nimport * as math from '../math/index';\r\nimport ImageLayer from '../layer/imageLayer';\r\nimport Polyline from '../layer/polyline';\r\nimport IText from '../layer/text';\r\nimport Render from './render';\r\nimport Rectangle from '../layer/rectangle';\r\nimport Util from '../util/util';\r\nimport QuadraticBerzier from '../layer/quadraticBerzier';\r\n\r\nexport default class CanvasHelper {\r\n  public static cache: Map<string, HTMLImageElement> = new Map();\r\n  public retina: number = 1;\r\n  public isCache: boolean = false;\r\n  private readonly canvas: HTMLCanvasElement;\r\n  private readonly context: CanvasRenderingContext2D;\r\n  private w: number = 0;\r\n  private h: number = 0;\r\n  private scale: number;\r\n  private center: Vertex = [0, 0];\r\n  private bgColor: string = '#ffffff';\r\n  private aliaveCache: Map<string, HTMLImageElement>;\r\n  private readonly render: Render;\r\n  constructor(w: number, h: number, render: Render, scale: number = 1) {\r\n    this.render = render;\r\n    this.retina = window.devicePixelRatio || 1;\r\n    this.canvas = document.createElement('canvas') as HTMLCanvasElement;\r\n    this.context = this.canvas.getContext('2d') as CanvasRenderingContext2D;\r\n    this.scale = scale;\r\n    this.aliaveCache = new Map();\r\n    this.updateSize(w, h);\r\n  }\r\n  /**\r\n   * 返回canvas节点\r\n   */\r\n  public getCanvasDom(): HTMLCanvasElement {\r\n    return this.canvas;\r\n  }\r\n  /**\r\n   * 返回缩放级别\r\n   */\r\n  public getScale(): number {\r\n    return this.scale;\r\n  }\r\n  /**\r\n   * 返回画布以右上角为基准点的原点屏幕坐标\r\n   */\r\n  public getOriginCenter(): Vertex {\r\n    return this.center;\r\n  }\r\n  /**\r\n   * 返回画布可视区域的世界坐标Bound\r\n   */\r\n  public getViewBound(): math.Bound {\r\n    const leftBottom = this.screenToWorldCoordinate([0, this.h / this.retina]);\r\n    const rightTop = this.screenToWorldCoordinate([this.w / this.retina, 0]);\r\n    return new math.Bound(leftBottom[0], leftBottom[1], rightTop[0] - leftBottom[0], rightTop[1] - leftBottom[1]);\r\n  }\r\n  /**\r\n   * 返回画布各项参数,用于clone\r\n   */\r\n  public getDrawStatus(): boolean {\r\n    return true;\r\n  }\r\n  /**\r\n   * 转换本地坐标为世界坐标(前端显示的坐标)\r\n   * @param evt 以原点为基准点的屏幕坐标\r\n   */\r\n  public localToWorldCoordinate(evt: Vertex): Vertex {\r\n    return [evt[0] / this.retina, -evt[1] / this.retina];\r\n  }\r\n  /**\r\n   * 转换世界坐标为以原点为基准点的本地坐标(canvas绘制时的坐标)\r\n   * @param pt 世界坐标\r\n   */\r\n  public worldCoordinateToLocal(pt: Vertex): Vertex {\r\n    return [Math.round((pt[0] * this.retina)), Math.round((-pt[1] * this.retina))];\r\n  }\r\n  /**\r\n   * 转换世界坐标为以右上角为基准点的屏幕坐标\r\n   * @param pt 世界坐标\r\n   */\r\n  public worldCoordinateToScreen(pt: Vertex): Vertex {\r\n    return [this.center[0] / this.retina + pt[0] * this.scale, this.center[1] / this.retina - pt[1] * this.scale];\r\n  }\r\n  /**\r\n   * 转换以右上角为基准点的屏幕坐标为世界坐标\r\n   * @param pt 屏幕像素坐标\r\n   */\r\n  public screenToWorldCoordinate(pt: Vertex): Vertex {\r\n    return [(pt[0] - this.center[0] / this.retina) / this.scale, (this.center[1] / this.retina - pt[1]) / this.scale];\r\n  }\r\n  /**\r\n   * 计算当前鼠标位置与原点的坐标偏移\r\n   * @param e 事件参数\r\n   */\r\n  public getOffset(e: any): number[] {\r\n    return [(e.offsetX * this.retina - this.center[0]) / this.scale,\r\n      (this.center[1] - e.offsetY * this.retina) / this.scale];\r\n  }\r\n  /**\r\n   * 计算屏幕像素坐标距屏幕中心点的偏移量\r\n   * @param pt 屏幕像素坐标\r\n   */\r\n  public getOffsetToScreenCenter(pt: Vertex): Vertex {\r\n    return [pt[0] * this.retina - this.w / 2, pt[1] * this.retina - this.h / 2];\r\n  }\r\n  /**\r\n   * 获得屏幕中心世界坐标\r\n   */\r\n  public getCenterPoint(): Vertex {\r\n    return this.screenToWorldCoordinate([this.w / 2 / this.retina, this.h / 2 / this.retina]);\r\n  }\r\n  /**\r\n   * 返回文字的宽度\r\n   * @param layer IText\r\n   */\r\n  public measureTextWidth(layer: IText): number {\r\n    if (layer.options && layer.options.font) {\r\n      this.context.font = layer.options.font;\r\n    }\r\n    return this.context.measureText(layer.text).width;\r\n  }\r\n  /**\r\n   * 返回缓存中的图片\r\n   */\r\n  public getCache(): Map<string, HTMLImageElement> {\r\n    return CanvasHelper.cache;\r\n  }\r\n  /**\r\n   * 将世界坐标距离转换为屏幕像素坐标\r\n   * @param dis number\r\n   */\r\n  public transformScreenDistance(dis: number): number {\r\n    return dis / this.scale / this.retina;\r\n  }\r\n  /**\r\n   * 设置缓存图片\r\n   * @param cache 图片缓存\r\n   */\r\n  public setCache(cache: Map<string, HTMLImageElement>) {\r\n    CanvasHelper.cache = cache;\r\n  }\r\n  /**\r\n   * 添加缓存图片\r\n   * @param key 缓存key\r\n   * @param image 缓存image\r\n   */\r\n  public addCache(key: string, image: HTMLImageElement) {\r\n    CanvasHelper.cache.set(key, image);\r\n  }\r\n  /**\r\n   * 设置分辨率\r\n   * @param retina 分辨率\r\n   */\r\n  public setRetina(retina: number) {\r\n    this.retina = retina;\r\n  }\r\n  /**\r\n   * 设置画布的背景色\r\n   * @param color 背景颜色代码\r\n   */\r\n  public setBackground(color?: string) {\r\n    this.context.clearRect(0, 0, this.w, this.h);\r\n    this.context.fillStyle = color || this.bgColor;\r\n    this.context.fillRect(0, 0, this.w, this.h);\r\n  }\r\n  /**\r\n   * 设置画布缩放参数\r\n   * @param scale 缩放级别\r\n   */\r\n  public setScale(scale: number) {\r\n    this.scale = scale;\r\n  }\r\n  /**\r\n   * 设置画布中心点坐标\r\n   * @param center 画布中心点\r\n   */\r\n  public setCenter(center: Vertex) {\r\n    this.center = center;\r\n  }\r\n  /**\r\n   * 更新画布的bound\r\n   * @param w 画布宽度（css宽度）\r\n   * @param h 画布高度（css高度\r\n   */\r\n  public updateSize(w: number, h: number) {\r\n    this.w = w * this.retina;\r\n    this.h = h * this.retina;\r\n    this.canvas.style.width = `${w}px`;\r\n    this.canvas.style.height = `${h}px`;\r\n    this.canvas.width = this.w;\r\n    this.canvas.height = this.h;\r\n    this.center = [this.w / 2, this.h / 2];\r\n  }\r\n  /**\r\n   * 清空所有画布\r\n   */\r\n  public clear() {\r\n    this.context.clearRect(0, 0, this.w, this.h);\r\n  }\r\n  /**\r\n   * 清空bound区域画布\r\n   * @param bound math.Bound\r\n   */\r\n  public clearPart(bound: math.Bound) {\r\n    const screenPt = this.worldCoordinateToScreen([bound.x, bound.y + bound.height]);\r\n    this.context.clearRect(screenPt[0] - 1, screenPt[1] - 1, bound.width * this.scale + 1, bound.height * this.scale + 1);\r\n  }\r\n  /**\r\n   * 开始绘制\r\n   * @param redraw 是否全部重绘(用于是否清空缓存图片)\r\n   */\r\n  public startDraw(redraw?: boolean) {\r\n    this.context.save();\r\n    this.context.translate(this.center[0], this.center[1]);\r\n    this.context.scale(this.scale, this.scale);\r\n    if (redraw) {\r\n      this.aliaveCache.clear();\r\n    }\r\n  }\r\n  /**\r\n   * 结束绘制\r\n   * @param redraw 是否全部重绘(用于是否更新缓存图片)\r\n   */\r\n  public endDraw(redraw?: boolean) {\r\n    this.context.restore();\r\n    // if (redraw) {\r\n    //   CanvasHelper.cache = new Map(this.aliaveCache);\r\n    // }\r\n  }\r\n  /**\r\n   * 绘制圆\r\n   * @param layer Circle图层\r\n   */\r\n  public drawCircle(layer: Circle) {\r\n    const center = layer.getGeometry();\r\n    const radius = layer.getRadius();\r\n    this.context.beginPath();\r\n    const localPt = this.worldCoordinateToLocal(center);\r\n    this.context.arc(localPt[0], localPt[1], radius * this.retina, 0, Math.PI * 2);\r\n    this._fillstroke(layer);\r\n  }\r\n  /**\r\n   * 绘制线或者面\r\n   * @param layer Polyline图层\r\n   */\r\n  public drawPolyline(layer: Polyline) {\r\n    const geo: any = layer.getGeometry();\r\n    if (geo.length === 0) {\r\n      return;\r\n    }\r\n    this.context.beginPath();\r\n    const level: number = Util.dimension_Array(geo);\r\n    if (level === 2) {\r\n      for (let i = 0; i < geo.length; i++) {\r\n        const vertex = this.worldCoordinateToLocal(geo[i]);\r\n        this.context[i ? 'lineTo' : 'moveTo'](vertex[0], vertex[1]);\r\n      }\r\n      if (layer.getLayerType() === GraphType.POLYGON) {\r\n        this.context.closePath();\r\n      }\r\n      this._fillstroke(layer);\r\n    } else {\r\n      for (const mgeo of geo) {\r\n        this.context.beginPath();\r\n        for (let j = 0; j < mgeo.length; j++) {\r\n          const vertex = this.worldCoordinateToLocal(mgeo[j]);\r\n          this.context[j ? 'lineTo' : 'moveTo'](vertex[0], vertex[1]);\r\n        }\r\n        if (layer.getLayerType() === GraphType.POLYGON) {\r\n          this.context.closePath();\r\n        }\r\n        this._fillstroke(layer);\r\n      }\r\n    }\r\n    \r\n  }\r\n  /**\r\n   * 绘制二次贝塞尔曲线\r\n   * @param layer QuatraticBerzier图层\r\n   */\r\n  public drawQuadraticBerzier(layer: QuadraticBerzier) {\r\n    const pts: Vertex[] = layer.getGeometry().map((p: Vertex) => this.worldCoordinateToLocal(p));\r\n    this.context.beginPath();\r\n    this.context.moveTo(pts[0][0], pts[0][1]);\r\n    this.context.quadraticCurveTo(pts[1][0], pts[1][1], pts[2][0], pts[2][1]);\r\n    this._fillstroke(layer);\r\n  }\r\n  /**\r\n   * 绘制矩形\r\n   * @param layer Rectangle图层\r\n   */\r\n  public drawRectangle(layer: Rectangle) {\r\n    this.context.beginPath();\r\n    const pt = this.worldCoordinateToLocal(layer.getNorthWest());\r\n    this.context.rect(pt[0], pt[1], layer.width * this.retina, layer.height * this.retina);\r\n    this._fillstroke(layer);\r\n  }\r\n  /**\r\n   * 绘制图片\r\n   * @param layer 图片图层\r\n   */\r\n  public async drawImage(layer: ImageLayer) {\r\n    if (!layer.accesible) {\r\n      return;\r\n    }\r\n    if (CanvasHelper.cache.has(layer.url)) {\r\n      this.render.deletePeddingLayer(layer);\r\n      const imageData = CanvasHelper.cache.get(layer.url) as HTMLImageElement;\r\n      this.aliaveCache.set(layer.url, imageData);\r\n      const bound = layer.getGeometry();\r\n      const position = this.worldCoordinateToLocal([bound.x, bound.y + bound.height]);\r\n      if (this.isCache) {\r\n        this.context.shadowOffsetX = 5; // 阴影Y轴偏移\r\n        this.context.shadowOffsetY = 5; // 阴影X轴偏移\r\n        this.context.shadowBlur = 8; // 模糊尺寸\r\n        this.context.shadowColor = 'rgba(0, 0, 0, 0.5)'; // 颜色\r\n      }\r\n      this.context.drawImage(imageData, position[0], position[1], bound.width * this.retina, bound.height * this.retina);\r\n    } else {\r\n      console.log(false, layer.url);\r\n      this.render.setPeddingLayer(layer.id);\r\n      const image = await layer.loadImageData();\r\n      CanvasHelper.cache.set(layer.url, image);\r\n      this.render.redraw();\r\n    }\r\n  }\r\n  /**\r\n   * 绘制文字\r\n   * @param layer 文字图层\r\n   */\r\n  public drawText(layer: IText) {\r\n    this.context.save();\r\n    this._setFontStyle(layer);\r\n    const pos: Vertex = layer.getGeometry();\r\n    const localPt = this.worldCoordinateToLocal(pos);\r\n    const content: string[] = layer.content.map((item) => item.text);\r\n    const fontSize = layer.getFontSize();\r\n    const space: number = layer.options.verticleSpace * this.retina;\r\n    const len: number = layer.content.length;\r\n    for (let i = 0; i < len; i++) {\r\n      let y: number = 0;\r\n      if (i === 1) {\r\n        this.context.textAlign = 'left';\r\n        localPt[0] -= layer.options.maxLength / 2 * this.retina;\r\n      }\r\n      if (layer.options.baseLine === 'bottom') {\r\n        y = localPt[1] - (len - i - 1) * (fontSize + space);\r\n      } else if (layer.options.baseLine === 'middle') {\r\n        y = localPt[1] - ((len - 1) / 2 - i) * (fontSize + space);\r\n      } else {\r\n        y = localPt[1] + (fontSize + space) * i;\r\n      }\r\n      if (layer.options.fill) {\r\n        this.context.fillText(content[i], localPt[0], y);\r\n      } else if (layer.options.stroke) {\r\n        this.context.strokeText(content[i], localPt[0], y);\r\n      }\r\n    }\r\n    this.context.restore();\r\n  }\r\n  /**\r\n   * 返回文字的对应宽度\r\n   * @param text string\r\n   * @param fontStyle string\r\n   */\r\n  public getTextWidth(text: string, fontStyle?: string): number {\r\n    this.context.save();\r\n    if (fontStyle) {\r\n      this.context.font = fontStyle;\r\n    }\r\n    const width = this.context.measureText(text).width;\r\n    this.context.restore();\r\n    return width;\r\n  }\r\n  /**\r\n   * 设置stroke和fill等参数\r\n   * @param layer Layer图层\r\n   */\r\n  private _fillstroke(layer: Layer) {\r\n    const options = this.isCache ? {...layer.options, ...layer.highOptions} : layer.options;\r\n    if (options.fill) {\r\n      this.context.globalAlpha = options.fillOpacity;\r\n      this.context.fillStyle = options.fillColor || options.color;\r\n      this.context.fill(options.fillRule || 'evenodd');\r\n    }\r\n    if (options.shadow) {\r\n      this.context.shadowOffsetX = options.shadowOffsetX || 5; // 阴影Y轴偏移\r\n      this.context.shadowOffsetY = options.shadowOffsetY || -5; // 阴影X轴偏移\r\n      this.context.shadowBlur = options.shadowBlur || 12; // 模糊尺寸\r\n      this.context.shadowColor = options.shadowColor || 'rgba(0, 0, 0, 0.5)'; // 颜色\r\n    }\r\n    if (options.stroke && options.weight !== 0) {\r\n      if (this.context.setLineDash) {\r\n        this.context.setLineDash(layer.options && layer.options.dashArray || []);\r\n      }\r\n      this.context.globalAlpha = options.opacity;\r\n      this.context.lineWidth = options.weight * this.retina;\r\n      this.context.strokeStyle = options.color;\r\n      this.context.lineCap = options.lineCap;\r\n      this.context.lineJoin = options.lineJoin;\r\n      this.context.stroke();\r\n    }\r\n  }\r\n  /**\r\n   * 设置字体参数\r\n   * @param layer Layer图层\r\n   */\r\n  private _setFontStyle(layer: Layer) {\r\n    const options = this.isCache ? {...layer.options, ...layer.highOptions} : layer.options;\r\n    if (options.font) {\r\n      this.context.font = options.font.replace(/\\d+px/, ($1: string) => {\r\n          return +$1.slice(0, $1.length - 2) * this.retina + 'px';\r\n      });\r\n    }\r\n    if (options.fill) {\r\n      this.context.fillStyle = this.isCache ? layer.highOptions.fillColor || layer.highOptions.color : layer.options.fillColor || layer.options.color;\r\n    }\r\n    if (options.shadow) {\r\n      this.context.shadowOffsetX = options.shadowOffsetX || 5; // 阴影Y轴偏移\r\n      this.context.shadowOffsetY = options.shadowOffsetY || -5; // 阴影X轴偏移\r\n      this.context.shadowBlur = options.shadowBlur || 12; // 模糊尺寸\r\n      this.context.shadowColor = options.shadowColor || 'rgba(0, 0, 0, 0.5)'; // 颜色\r\n    }\r\n    if (options.stroke) {\r\n      this.context.strokeStyle = this.isCache ? layer.highOptions.color : layer.options.color;\r\n    }\r\n    this.context.textAlign = options.textAlign;\r\n    this.context.textBaseline = options.baseLine;\r\n  }\r\n}\r\n","import Evt from '../core/evt';\r\nimport Stage from '../core/stage';\r\nimport Util from '../util/util';\r\nimport { GraphType, XY, Vertex } from '../typeof/typeof';\r\nimport * as math from '../math/index';\r\nimport LayerGroup from './layerGroup';\r\n\r\nexport default abstract class Layer extends Evt {\r\n  public dirtyData: any; // 业务脏数据\r\n  public userCache: boolean = true;\r\n  public readonly id: string;\r\n  public readonly options: {\r\n    [k: string]: any,\r\n  };\r\n  public highOptions: {\r\n    [k: string]: any,\r\n  } = {\r\n    fill: true,\r\n    fillColor: '#0FFFFF',\r\n    color: '#0FFFFF',\r\n  };\r\n  public type: GraphType;\r\n  protected tolerance: number = 5;\r\n  constructor() {\r\n    super();\r\n    this.id = Util.createID();\r\n    this.options = {\r\n      stroke: true,\r\n      color: '#3388ff',\r\n      weight: 1,\r\n      opacity: 1,\r\n      lineCap: 'butt',\r\n      lineJoin: 'miter',\r\n      dashArray: null,\r\n      dashOffset: null,\r\n      fill: false,\r\n      fillColor: null,\r\n      fillOpacity: 1,\r\n      fillRule: 'evenodd',\r\n      shadow: false,\r\n      strict: true,\r\n    };\r\n    this.type = this.getLayerType();\r\n  }\r\n  /**\r\n   * 返回绑定图层的Stage\r\n   */\r\n  public getStage(): Stage | undefined {\r\n    return this.options._stage;\r\n  }\r\n  /**\r\n   * 返回业务脏数据\r\n   */\r\n  public getDirtyData() {\r\n    return this.dirtyData;\r\n  }\r\n  /**\r\n   * 设置图层属性\r\n   * @param options Object\r\n   */\r\n  public setOptions(options: {[k: string]: any}) {\r\n    Object.keys(options).forEach((k: string) => {\r\n      this.options[k] = options[k];\r\n    });\r\n  }\r\n  /**\r\n   * 设置图层样式\r\n   * @param options Object\r\n   */\r\n  public setStyle(options: {[k: string]: any}) {\r\n    this.setOptions(options);\r\n    this.updateAll();\r\n  }\r\n  /**\r\n   * 设置\r\n   * @param data any\r\n   */\r\n  public setDirtyData(data: any) {\r\n    this.dirtyData = data;\r\n  }\r\n  /**\r\n   * 高亮图层\r\n   * @param options Object\r\n   */\r\n  public highLight(options: {[k: string]: any} = {}) {\r\n    this.setHighlightOptions(options);\r\n    (this.getStage() as Stage).addHighLightLayer(this);\r\n  }\r\n  /**\r\n   * 设置高亮样式\r\n   * @param options 高亮图层style\r\n   */\r\n  public setHighlightOptions(options: {[k: string]: any} = {}) {\r\n    this.highOptions = {...this.highOptions, ...options,};\r\n  }\r\n  /**\r\n   * 清除高亮\r\n   */\r\n  public clearHighLight() {\r\n    (this.getStage() as Stage).clearHighLightLayer(this);\r\n  }\r\n  /**\r\n   * 添加图层到Stage或者Layergroup\r\n   * @param stage Stage\r\n   */\r\n  public addTo(stage: Stage | LayerGroup) {\r\n    stage.addLayer(this);\r\n    return this;\r\n  }\r\n  /**\r\n   * 添加图层\r\n   * @param stage Stage\r\n   */\r\n  public layerAdd(stage: Stage) {\r\n    this.setRender(stage);\r\n    this.options._render.addDraw(this);\r\n    this.fire('loaded', {layer: this, sourceTarget: stage.container});\r\n    stage.fire('layerAdd', {layer: this});\r\n  }\r\n  /**\r\n   * 将XY对象格式数据转为数组格式\r\n   * @param vertexs Geometry\r\n   */\r\n  public clearnData(vertexs: any[]): Vertex[] | Vertex[][] {\r\n    const pts: number[][] = [];\r\n    for (const vertex of vertexs) {\r\n      pts.push(this.transformVertex(vertex));\r\n    }\r\n    return pts;\r\n  }\r\n  /**\r\n   * 转换坐标点数据格式\r\n   * @param vertex 坐标点\r\n   */\r\n  public transformVertex(vertex: XY | number[]): number[] {\r\n    if (!Array.isArray(vertex)) {\r\n      return this.transformToArray(vertex);\r\n    } else {\r\n      return vertex;\r\n    }\r\n  }\r\n  /**\r\n   * 对象格式转数组格式\r\n   * @param xy XY对象格式坐标点\r\n   */\r\n  public transformToArray(xy: XY): number[] {\r\n    return [xy.x, xy.y];\r\n  }\r\n  /**\r\n   * 更新全部图层\r\n   */\r\n  public updateAll() {\r\n    if (this.options._render) {\r\n      this.options._render.redraw();\r\n    }\r\n  }\r\n  /**\r\n   * 添加某个图层路径\r\n   */\r\n  public addPath() {\r\n    if (this.options._render) {\r\n      this.options._render.addDraw(this);\r\n    }\r\n  }\r\n  /**\r\n   * 删除某个图层\r\n   */\r\n  public remove() {\r\n    if (this.options._stage) {\r\n      this.options._stage.removeLayer(this);\r\n    }\r\n  }\r\n  public removePath() {\r\n    const bound = this.getBound();\r\n    this.options._render.clearBoundPath(bound);\r\n  }\r\n  /**\r\n   * 返回图层的Bound\r\n   */\r\n  public getBound(): math.Bound {\r\n    const geometry = this.getGeometry();\r\n    if (geometry instanceof math.Bound) {\r\n      return geometry;\r\n    }\r\n    const level: number = Util.dimension_Array(geometry);\r\n    if (level === 2) {\r\n      const polyline = new math.Polyline(geometry);\r\n      return polyline.getBound();\r\n    } else if (level === 3) { // 最多三维数组\r\n      let bound = null;\r\n      for (const geo of geometry) {\r\n        const line = new math.Polyline(geo);\r\n        if (bound) {\r\n          bound = line.getBound().union(bound);\r\n        } else {\r\n          bound = line.getBound();\r\n        }\r\n      }\r\n      return bound as math.Bound;\r\n    }\r\n    return new math.Bound(Number.MAX_SAFE_INTEGER, Number.MAX_SAFE_INTEGER, Number.MAX_SAFE_INTEGER, Number.MAX_SAFE_INTEGER);\r\n  }\r\n  /**\r\n   * 返回图层Bound的中心\r\n   */\r\n  public getCenter(): Vertex {\r\n    const bound = this.getBound();\r\n    return bound.getCenter();\r\n  }\r\n  /**\r\n   * 返回图层Bound时候包含待测点\r\n   * @param pos 待测点\r\n   */\r\n  public containPoint(pos: Vertex): boolean {\r\n    const bound: math.Bound = this.getBound();\r\n    return bound.contain(pos);\r\n  }\r\n  /**\r\n   * 设置图层渲染器\r\n   * @param stage Stage\r\n   */\r\n  public setRender(stage: Stage) {\r\n    this.options._stage = stage;\r\n    this.options._render = stage.render;\r\n  }\r\n  /**\r\n   * 图层是否与Bound相交\r\n   * @param bound Bound\r\n   */\r\n  public isIntersectWithBound(bound: math.Bound): boolean {\r\n    return false;\r\n  }\r\n  public isWithinBound(bound: math.Bound): boolean {\r\n    return bound.contain(this.getBound());\r\n  }\r\n  /**\r\n   * 返回图层的类型\r\n   */\r\n  public abstract getLayerType(): GraphType;\r\n  /**\r\n   * 返回图层的坐标数据\r\n   */\r\n  public abstract getGeometry(): any;\r\n  /**\r\n   * 返回待测点是否在Layer容差范围内\r\n   * @param pos 待测点\r\n   */\r\n  public abstract isPointClosest(pos: Vertex, tolerance?: number): boolean;\r\n  /**\r\n   * 克隆layer\r\n   */\r\n  public abstract clone(): Layer;\r\n  /**\r\n   * 平移图层\r\n   */\r\n  public abstract translate(dx: number, dy: number): void;\r\n}\r\n","import Layer from './layer';\r\nimport { GraphType, Vertex, TextAlign, BaseLine } from '../typeof/typeof';\r\nimport * as math from '../math/index';\r\n\r\n\r\nexport default class IText extends Layer {\r\n  public text: string;\r\n  public content: Array<{text: string, width: number}> = [];\r\n  protected geometry: Vertex;\r\n  constructor(geo: Vertex, text: string, options: {[k: string]: any} = {}) {\r\n    super();\r\n    this.geometry = geo;\r\n    this.text = text;\r\n    const defaultOptions = {\r\n      fill: true,\r\n      stroke: false,\r\n      font: '14px Arial',\r\n      textAlign: TextAlign.LEFT, // 'start|end|center|left|right'\r\n      baseLine: BaseLine.MIDDLE, // 'alphabetic|top|hanging|middle|ideographic|bottom'\r\n      maxLength: 0,\r\n      verticleSpace: 0,\r\n    };\r\n    // textAlign 设置或返回文本内容的当前对齐方式\r\n    // start : 默认。文本在指定的位置开始。\r\n    // end : 文本在指定的位置结束。\r\n    // center: 文本的中心被放置在指定的位置。\r\n    // left : 文本左对齐。\r\n    // right : 文本右对齐。\r\n    // -----------------------------------------\r\n    // alphabetic ： (默认)文本基线是普通的字母基线。 英文字母底部对齐\r\n    // top ： 文本基线是 em 方框的顶端。顶部对齐\r\n    // hanging ： 文本基线是悬挂基线。 顶部对齐\r\n    // middle ： 文本基线是 em 方框的正中。中部对齐\r\n    // ideographic： 文本基线是em基线。底部对齐\r\n    // bottom ： 文本基线是 em 方框的底端。底部对齐\r\n    this.setOptions({...defaultOptions, ...options});\r\n    if (options.fontSize && typeof options.fontSize === 'number') {\r\n      this.options.font = options.fontSize.toString() + 'px Arial';\r\n    }\r\n  }\r\n  public getLayerType(): GraphType {\r\n    return GraphType.TEXT;\r\n  }\r\n  public getGeometry(): Vertex {\r\n    return this.geometry;\r\n  }\r\n  /**\r\n   * 返回文字的Bound\r\n   */\r\n  public getBound(): math.Bound {\r\n    const fontSize: number = this.getFontSize();\r\n    const len = this.content.length;\r\n    const height: number = fontSize * len + (len - 1) * this.options.verticleSpace;\r\n    let width: number = this.options.maxLength;\r\n    if (len === 1) {\r\n      width = this.content[0].width;\r\n    }\r\n    let [x, y] = [this.geometry[0], this.geometry[1]];\r\n    if (this.options.textAlign === 'end' || this.options.textAlign === 'right') {\r\n      x -= width;\r\n    } else if (this.options.textAlign === 'center') {\r\n      x -= width / 2;\r\n    }\r\n    if (this.options.baseLine === 'top' || this.options.baseLine === 'hanging') {\r\n      y -= height;\r\n    } else if (this.options.baseLine === 'middle') {\r\n      y -= height / 2;\r\n    }\r\n    return new math.Bound(x, y, width, height);\r\n  }\r\n  /**\r\n   * 返回文字的轮廓线\r\n   */\r\n  public computeOutline(): Vertex[] {\r\n    const fontSize: number = this.getFontSize();\r\n    const offsetY = fontSize + this.options.verticleSpace;\r\n    const vertexs: Vertex[] = this.getBound().getVetexs();\r\n    if (this.content.length > 1) {\r\n      const firstPt = vertexs[0];\r\n      const lastPt = vertexs[vertexs.length - 1];\r\n      const lastRow = this.content[this.content.length - 1];\r\n      if (this.options.textAlign === 'end' || this.options.textAlign === 'right') {\r\n        vertexs.splice(0, 1, [vertexs[0][0], vertexs[0][1] + offsetY]);\r\n        vertexs.push([lastPt[0] - lastRow.width, lastPt[1]], [lastPt[0] - lastRow.width, lastPt[1] + offsetY]);\r\n      } else if (this.options.textAlign === 'center') {\r\n        const offsetX: number = (this.options.maxLength - lastRow.width) / 2;\r\n        vertexs.splice(0, 1, [vertexs[0][0], vertexs[0][1] + offsetY]);\r\n        const temp = [\r\n          [lastPt[0], lastPt[1] + offsetY],\r\n          [lastPt[0] - offsetX, lastPt[1] + offsetY],\r\n          [lastPt[0] - offsetX, lastPt[1]],\r\n          [lastPt[0] - offsetX - lastRow.width, lastPt[1]],\r\n          [lastPt[0] - offsetX - lastRow.width, lastPt[1] + offsetY],\r\n        ];\r\n        vertexs.splice(-1, 1, ...temp);\r\n      } else {\r\n        const temp = [\r\n          [lastPt[0], lastPt[1] + offsetY],\r\n          [firstPt[0] + lastRow.width, firstPt[1] + offsetY],\r\n          [firstPt[0] + lastRow.width, firstPt[1]],\r\n        ];\r\n        vertexs.splice(-1, 1, ...temp);\r\n      }\r\n    }\r\n    return vertexs;\r\n  }\r\n  /**\r\n   * 设置文字内容\r\n   * @param text string\r\n   */\r\n  public setText(text: string) {\r\n    this.text = text;\r\n    this.fixContent();\r\n    this.updateAll();\r\n  }\r\n  public translate(dx: number, dy: number) {\r\n    this.geometry[0] += dx;\r\n    this.geometry[1] += dy;\r\n    this.updateAll();\r\n  }\r\n  public isPointClosest(pos: Vertex): boolean {\r\n    const outline = this.computeOutline();\r\n    outline.push(outline[0]);\r\n    let count = 0;\r\n    for (let i = 0; i < outline.length - 1; i++) {\r\n      const curPt = outline[i];\r\n      const nextPt = outline[i + 1];\r\n      if (math.Base.isZero(curPt[0] - nextPt[0]) && pos[0] < curPt[0] && (pos[1] - curPt[1]) * (pos[1] - nextPt[1]) < 0) {\r\n        count++;\r\n      }\r\n    }\r\n    return count % 2 === 1;\r\n  }\r\n  /**\r\n   * 对文字进行重新编排\r\n   */\r\n  public fixContent() {\r\n    if (!this.text) {\r\n      return;\r\n    }\r\n    if (!!this.options.maxLength && this.options.maxLength > 0) {\r\n      const rows: string[] = this.text.split('');\r\n      const temp: string[] = [rows[0]];\r\n      for (let i = 1; i < rows.length; i++) {\r\n        const text: string = temp.join('');\r\n        const width = this.options._render.canvasHelper.getTextWidth(text + rows[i], this.options.font);\r\n        if (width > this.options.maxLength) {\r\n          this.content.push({text, width});\r\n          temp.length = 0;\r\n        } else if (i === rows.length - 1) {\r\n          this.content.push({text: text + rows[i], width});\r\n        }\r\n        temp.push(rows[i]);\r\n      }\r\n    } else {\r\n      const width = this.options._render.canvasHelper.getTextWidth(this.text, this.options.font);\r\n      this.content.push({text: this.text, width});\r\n    }\r\n  }\r\n  /**\r\n   * 返回字体大小\r\n   */\r\n  public getFontSize(): number {\r\n    const defaultFontSize = 10;\r\n    const font = this.options.font.match(/\\d+px/);\r\n    if (font.length > 0) {\r\n      return parseInt(font[0], 10);\r\n    }\r\n    return defaultFontSize;\r\n  }\r\n  public isIntersectWithBound(bound: math.Bound): boolean {\r\n    const geoms: Vertex[] = this.computeOutline();\r\n    for (let i = 0; i < geoms.length - 1; i++) {\r\n      if (bound.isIntersectOfSegment(geoms[i], geoms[i + 1])) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n  public clone() {\r\n    const options = {...this.options, _render: null, _stage: null};\r\n    return new IText(this.geometry, this.text, options);\r\n  }\r\n}\r\n","import CanvasHelper from './canvas';\r\nimport { GraphType, Vertex } from '../typeof/typeof';\r\nimport Stage from './stage';\r\nimport Layer from '../layer/layer';\r\nimport Circle from '../layer/circle';\r\nimport Polyline from '../layer/polyline';\r\nimport ImageLayer from '../layer/imageLayer';\r\nimport LayerGroup from '../layer/layerGroup';\r\nimport IText from '../layer/text';\r\nimport * as math from '../math/index';\r\nimport Rectangle from '../layer/rectangle';\r\nimport QuadraticBerzier from '../layer/quadraticBerzier';\r\n\r\nexport default class Render {\r\n  // 是否渲染全部图层\r\n  private renderAll: boolean = false;\r\n  // 还未加载成功的图层\r\n  private peddingLayers: Set<string>;\r\n  private stage: Stage;\r\n  private canvasHelper: CanvasHelper;\r\n  private cacheHelper: CanvasHelper;\r\n  private isBatching: boolean =  false;\r\n  constructor(w: number, h: number, stage: Stage) {\r\n    const scale: number = stage.getZoom();\r\n    this.canvasHelper = new CanvasHelper(w, h, this, scale);\r\n    this.cacheHelper = new CanvasHelper(w, h, this, scale);\r\n    this.cacheHelper.isCache = true;\r\n    this.stage = stage;\r\n    this.peddingLayers = new Set();\r\n  }\r\n  /**\r\n   * 更新画布长宽\r\n   * @param w 画布宽度\r\n   * @param h 画布高度\r\n   */\r\n  public resize(w: number, h: number) {\r\n    this.canvasHelper.updateSize(w, h);\r\n    this.cacheHelper.updateSize(w, h);\r\n    this.redraw();\r\n  }\r\n  /**\r\n   * 获得画布中心的世界坐标\r\n   */\r\n  public getCenter(): Vertex {\r\n    return this.canvasHelper.getCenterPoint();\r\n  }\r\n  /**\r\n   * 返回鼠标位置的世界坐标\r\n   * @param pos 屏幕像素坐标\r\n   */\r\n  public getPos(pos: Vertex): Vertex {\r\n    return this.canvasHelper.screenToWorldCoordinate(pos);\r\n  }\r\n  /**\r\n   * 返回canvas dom实例\r\n   */\r\n  public getCanvasDom(): HTMLCanvasElement {\r\n    const mainCanvas: HTMLCanvasElement = this.canvasHelper.getCanvasDom();\r\n    mainCanvas.style.zIndex = '0';\r\n    mainCanvas.style.position = 'absolute';\r\n    mainCanvas.style.top = '0';\r\n    mainCanvas.style.left = '0';\r\n    return mainCanvas;\r\n  }\r\n  /**\r\n   * 返回缓存canvas dom实例\r\n   */\r\n  public getCacheCanvasDom(): HTMLCanvasElement {\r\n    const cacheCanvas: HTMLCanvasElement = this.cacheHelper.getCanvasDom();\r\n    cacheCanvas.style.zIndex = '1';\r\n    cacheCanvas.style.position = 'absolute';\r\n    cacheCanvas.style.top = '0';\r\n    cacheCanvas.style.left = '0';\r\n    return cacheCanvas;\r\n  }\r\n  /**\r\n   * 返回canvas实例类\r\n   */\r\n  public getCanvasHelper(): CanvasHelper {\r\n    return this.canvasHelper;\r\n  }\r\n  /**\r\n   * 返回cacheCanvas实例类\r\n   */\r\n  public getCacheHelper(): CanvasHelper {\r\n    return this.cacheHelper;\r\n  }\r\n  /**\r\n   * 返回当前视口画布的Bound坐标\r\n   */\r\n  public getBound(): math.Bound {\r\n    return this.canvasHelper.getViewBound();\r\n  }\r\n  /**\r\n   * 添加全局画布缓存资源\r\n   * @param key \r\n   * @param value \r\n   */\r\n  public addCache(key: string, value: HTMLImageElement) {\r\n    this.canvasHelper.addCache(key, value);\r\n  }\r\n  /**\r\n   * 设置批处理状态，减少重绘次数\r\n   * @param status Boolean\r\n   */\r\n  public setBatch(status: boolean) {\r\n    this.isBatching = status;\r\n  }\r\n  /**\r\n   * 返回加载所有图层的画布canvas\r\n   * @param options 渲染参数\r\n   */\r\n  public cloneCanvas(options?: {[k: string]: any}): Promise<HTMLCanvasElement> {\r\n    const bounds: math.Bound[] = [];\r\n    this.stage.eachLayer((layer: Layer) => {\r\n      const bbound: math.Bound = layer.getBound();\r\n      bounds[0] = bounds.length === 1 ? bounds[0].union(bbound) : bbound;\r\n    });\r\n    if (bounds.length === 0) {\r\n      return Promise.resolve(this.getCanvasDom());\r\n    }\r\n    const bound = bounds[0];\r\n    let paddingLeft: number = 0;\r\n    let paddingTop: number = 0;\r\n    let paddingRight: number = 0;\r\n    let paddingBottom: number = 0;\r\n    let retina: number = 2;\r\n    if (options) {\r\n      paddingLeft = options.padding.left || 0;\r\n      paddingTop = options.padding.top || 0;\r\n      paddingRight = options.padding.right || 0;\r\n      paddingBottom = options.padding.bottom || 0;\r\n      retina = options.retina || 2;\r\n    }\r\n    const width: number = bound.width + paddingLeft + paddingRight;\r\n    const height: number = bound.height + paddingTop + paddingBottom;\r\n    const cache: Map<string, HTMLImageElement> = this.canvasHelper.getCache();\r\n    const render: Render = new Render(width * retina, height * retina, this.stage);\r\n    render._setRederAll(true);\r\n    render.canvasHelper.setRetina(retina);\r\n    render.canvasHelper.setCache(cache);\r\n    const center: Vertex = [\r\n      bound.width / 2 + bound.x - (paddingLeft - paddingRight) / 2,\r\n      bound.height / 2 + bound.y - (paddingBottom - paddingTop) / 2,\r\n    ];\r\n    render.setCenter(center, 1);\r\n    render.canvasHelper.startDraw();\r\n    const layers = this.stage.getLayers();\r\n    for (const layer of layers) {\r\n      render.drawPath(layer);\r\n    }\r\n    return new Promise((resolve) => {\r\n      const check = () => {\r\n        if (render.peddingLayers.size === 0) {\r\n          resolve(render.getCanvasDom());\r\n        } else {\r\n          requestAnimationFrame(check);\r\n        }\r\n      };\r\n      requestAnimationFrame(check);\r\n    });\r\n  }\r\n  /**\r\n   * 绘制图层路径\r\n   * @param layer Layer\r\n   */\r\n  public drawPath(layer: Layer, canvasHelper: CanvasHelper = this.canvasHelper) {\r\n    const type: GraphType = layer.getLayerType();\r\n    switch (type) {\r\n      case GraphType.CIRCLE:\r\n      case GraphType.POINT:\r\n        canvasHelper.drawCircle(layer as Circle);\r\n        break;\r\n      case GraphType.POLYLINE:\r\n      case GraphType.POLYGON:\r\n        canvasHelper.drawPolyline(layer as Polyline);\r\n        break;\r\n      case GraphType.RECTANGLE:\r\n        canvasHelper.drawRectangle(layer as Rectangle);\r\n        break;\r\n      case GraphType.IMAGE:\r\n        canvasHelper.drawImage(layer as ImageLayer);\r\n        break;\r\n      case GraphType.TEXT:\r\n        canvasHelper.drawText(layer as IText);\r\n        break;\r\n      case GraphType.QUADRATICBERZIER:\r\n        canvasHelper.drawQuadraticBerzier(layer as QuadraticBerzier);\r\n        break;\r\n      case GraphType.GROUP:\r\n        this.drawGroup(layer as LayerGroup, canvasHelper);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n  /**\r\n   * 用于绘制图层组\r\n   * @param layer Group图层\r\n   */\r\n  public drawGroup(layer: LayerGroup, canvasHelper: CanvasHelper) {\r\n    const layers = layer.getLayers();\r\n    layer.setSubRender(layer.options._stage);\r\n    for (const glayer of layers) {\r\n      const type = glayer.getLayerType();\r\n      if (type === GraphType.GROUP) {\r\n        this.drawGroup(glayer as LayerGroup, canvasHelper);\r\n      } else {\r\n        this.drawPath(glayer, canvasHelper);\r\n      }\r\n    }\r\n  }\r\n  /**\r\n   * 在缓存canvas画布上渲染高亮图层\r\n   */\r\n  public renderCacheCanvas() {\r\n    this.cacheHelper.clear();\r\n    const layers: Layer[] = this.stage.getHighLightLayers();\r\n    if (layers.length === 0) {\r\n      return;\r\n    }\r\n    this.cacheHelper.startDraw();\r\n    const bound = this.stage.getBound();\r\n    for (const layer of layers) {\r\n      const bound1 = layer.getBound();\r\n      if (bound1 && bound.isOverlaped(bound1)) {\r\n        this.drawPath(layer, this.cacheHelper);\r\n      }\r\n    }\r\n    this.cacheHelper.endDraw();\r\n  }\r\n  /**\r\n   * 添加图层路径\r\n   * @param layer Layer\r\n   */\r\n  public addDraw(layer: Layer) {\r\n    if (layer instanceof IText) {\r\n      layer.fixContent();\r\n    }\r\n    this.canvasHelper.startDraw();\r\n    this.drawPath(layer);\r\n    this.canvasHelper.endDraw();\r\n  }\r\n  /**\r\n   * 画布重绘\r\n   */\r\n  public redraw() {\r\n    if (this.isBatching) {\r\n      return;\r\n    }\r\n    this.canvasHelper.clear();\r\n    // this.canvasHelper.setBackground('#c6c6c6');\r\n    this.canvasHelper.startDraw(true);\r\n    const bound = this.stage.getBound();\r\n    const layers = this.stage.getLayers();\r\n    for (const layer of layers) {\r\n      if (this.renderAll) {\r\n        this.drawPath(layer);\r\n        continue;\r\n      }\r\n      const bound1 = layer.getBound();\r\n      if (bound1 && bound.isOverlaped(bound1)) {\r\n        this.drawPath(layer);\r\n      }\r\n    }\r\n    this.canvasHelper.endDraw(true);\r\n    this.renderCacheCanvas();\r\n  }\r\n  /**\r\n   * 设置画布缩放参数\r\n   * @param scale 画布缩放参数\r\n   */\r\n  public setZoom(scale: number) {\r\n    this.canvasHelper.setScale(scale);\r\n    this.updateCacheCanvas();\r\n  }\r\n  /**\r\n   * 设置画布中心和缩放\r\n   * @param center 画布中心(世界坐标)\r\n   * @param zoom 缩放参数\r\n   */\r\n  public setCenter(center: Vertex, zoom: number) {\r\n    this.canvasHelper.setScale(zoom);\r\n    const pt = this.canvasHelper.worldCoordinateToScreen(center);\r\n    const offset = this.canvasHelper.getOffsetToScreenCenter(pt);\r\n    const origin = this.canvasHelper.getOriginCenter();\r\n    this.canvasHelper.setCenter([origin[0] - offset[0], origin[1] - offset[1]]);\r\n    this.updateCacheCanvas();\r\n  }\r\n  public updateCacheCanvas() {\r\n    const center = this.canvasHelper.getOriginCenter();\r\n    const scale = this.canvasHelper.getScale();\r\n    this.cacheHelper.setCenter(center);\r\n    this.cacheHelper.setScale(scale);\r\n  }\r\n  /**\r\n   * 清除指定Bound的画布区域\r\n   * @param bound math.Bound\r\n   */\r\n  public clearBoundPath(bound: math.Bound) {\r\n    this.canvasHelper.clearPart(bound);\r\n  }\r\n  /**\r\n   * 删除待加载的图层\r\n   * @param layer Layer\r\n   */\r\n  public deletePeddingLayer(layer: Layer) {\r\n    if (this.peddingLayers.has(layer.id)) {\r\n      this.peddingLayers.delete(layer.id);\r\n    }\r\n  }\r\n  /**\r\n   * 添加待加载的图层\r\n   * @param id String\r\n   */\r\n  public setPeddingLayer(id: string) {\r\n    this.peddingLayers.add(id);\r\n  }\r\n  /**\r\n   * 设置是否渲染全部图层\r\n   * @param bool boolean\r\n   */\r\n  protected _setRederAll(bool: boolean) {\r\n    this.renderAll = bool;\r\n  }\r\n}\r\n","import Evt from './evt';\r\nimport Render from './render';\r\nimport { EventData, Vertex, GraphType } from '../typeof/typeof';\r\nimport Layer from '../layer/layer';\r\nimport * as math from '../math/index';\r\nimport LayerGroup from '../layer/layerGroup';\r\n\r\ninterface ValidEventType {\r\n  [k: string]: string;\r\n}\r\ninterface Options {\r\n  zoom?: number;\r\n  minZoom?: number;\r\n  maxZoom?: number;\r\n  zoomChange?: number;\r\n}\r\nexport default class Stage extends Evt {\r\n  public options: {[k: string]: any};\r\n  public readonly container: HTMLDivElement;\r\n  public readonly render: Render;\r\n  private draggEnable: boolean = true;\r\n  private center: Vertex;\r\n  private zoom: number = 1;\r\n  private minZoom: number = 0.1;\r\n  private maxZoom: number = 30;\r\n  private zoomChange: number = 0.1;\r\n  private amination!: number;\r\n  private readonly layers: Map <string, Layer>;\r\n  private readonly highLightLayers: Map <string, Layer>;\r\n  constructor(id: string, options: Options = {}) {\r\n    super();\r\n    this.container = document.getElementById(id) as HTMLDivElement;\r\n    if (!this.container) {\r\n      throw new Error('Stage container is not found.');\r\n    }\r\n    this.render = new Render(this.container.clientWidth, this.container.clientHeight, this);\r\n    this.layers = new Map();\r\n    this.highLightLayers = new Map();\r\n    this._initContainer();\r\n    this.center = this.render.getCenter();\r\n    this.options = options;\r\n    this.options.id = id;\r\n    this._setOptions(options);\r\n    this._initEvents();\r\n    this._resize();\r\n  }\r\n  /**\r\n   * 返回所有图层\r\n   */\r\n  public getLayers(filter?: any): Layer[] {\r\n    const layers = Array.from(this.layers.values());\r\n    if (filter) {\r\n      return layers.filter((layer) => filter(layer));\r\n    }\r\n    return layers;\r\n  }\r\n  /**\r\n   * 返回满足条件的第一个图层\r\n   * @param filter 过滤函数\r\n   */\r\n  public getLayer(filter: any): Layer | undefined {\r\n    const layers = Array.from(this.layers.values());\r\n    for (const layer of layers) {\r\n      if (filter(layer)) {\r\n        return layer;\r\n      }\r\n    }\r\n  }\r\n  /**\r\n   * 返回所有高亮的图层\r\n   */\r\n  public getHighLightLayers(): Layer[] {\r\n    return Array.from(this.highLightLayers.values());\r\n  }\r\n  /**\r\n   * 返回当前缩放级别\r\n   */\r\n  public getZoom(): number {\r\n    return this.zoom;\r\n  }\r\n  /**\r\n   * 返回画布中心点的世界坐标\r\n   */\r\n  public getCenter(): Vertex {\r\n    return this.render.getCenter();\r\n  }\r\n  /**\r\n   * 返回最小缩放级别\r\n   */\r\n  public getMinzoom(): number {\r\n    return this.minZoom;\r\n  }\r\n  /**\r\n   * 返回最大缩放级别\r\n   */\r\n  public getMaxZoom(): number {\r\n    return this.maxZoom;\r\n  }\r\n  /**\r\n   * 返回当前视口的Bound\r\n   */\r\n  public getBound(): math.Bound {\r\n    return this.render.getBound();\r\n  }\r\n  /**\r\n   * 将世界坐标转换成屏幕坐标\r\n   * @param pt 世界坐标\r\n   */\r\n  public transferWorldCoordinateToScreen(pt: Vertex): Vertex {\r\n    const canvasHelper = this.render.getCanvasHelper();\r\n    return canvasHelper.worldCoordinateToScreen(pt);\r\n  }\r\n  /**\r\n   * 返回包含所有图层的画布图片\r\n   * @param options 渲染参数\r\n   */\r\n  public async getAllLayerImage(options?: {[k: string]: any}): Promise<string> {\r\n    const canvas: HTMLCanvasElement = await this.render.cloneCanvas(options);\r\n    return canvas.toDataURL('image/png', 0.9);\r\n  }\r\n  /**\r\n   * 返回当前视口的画布图片\r\n   */\r\n  public getViewImage(): string {\r\n    const canvas: HTMLCanvasElement = this.render.getCanvasDom();\r\n    return canvas.toDataURL('image/png', 0.9);\r\n  }\r\n  /**\r\n   * 根据坐标点返回选中的图层\r\n   * @param pos Vertex\r\n   */\r\n  public getLayersByPosition(pos: Vertex): Layer[] {\r\n    const layers: Layer[] = [];\r\n    for (const [id, layer] of this.layers) {\r\n      if (layer.isPointClosest(pos)) {\r\n        layers.push(layer);\r\n      }\r\n    }\r\n    return layers;\r\n  }\r\n  /**\r\n   * 根据坐标点返回选中的图层\r\n   * @param pos Vertex\r\n   */\r\n  public getLayerByPosition(pos: Vertex, tolerance?: number): Layer | undefined {\r\n    for (const [id, layer] of this.layers) {\r\n      if (layer.isPointClosest(pos, tolerance)) {\r\n        return layer;\r\n      }\r\n    }\r\n  }\r\n  /**\r\n   * 查找与矩形相交的图层\r\n   * @param bound Bound\r\n   * @param intersect 图层与bound相交或者包含在bound\r\n   */\r\n  public getLayersByBound(bound: math.Bound, intersect: boolean = true): Layer[] {\r\n    const layers: Layer[] = [];\r\n    for (const [id, layer] of this.layers) {\r\n      if (intersect && layer.isIntersectWithBound(bound)) {\r\n        layers.push(layer);\r\n      } else if (layer.isWithinBound(bound)) {\r\n        layers.push(layer);\r\n      }\r\n    }\r\n    return layers;\r\n  }\r\n  /**\r\n   * 返回屏幕像素距离\r\n   * @param dis number\r\n   */\r\n  public getScreenDistance(dis: number): number {\r\n    const canvasHelper = this.render.getCanvasHelper();\r\n    return canvasHelper.transformScreenDistance(dis);\r\n  }\r\n  /**\r\n   * 添加图层\r\n   * @param layer Layer\r\n   */\r\n  public addLayer(layer: Layer) {\r\n    const id: string = layer.id;\r\n    if (this.layers.has(id)) {\r\n      return this;\r\n    }\r\n    this.layers.set(id, layer);\r\n    layer.layerAdd(this);\r\n    return this;\r\n  }\r\n  /**\r\n   * 是否包含某个图层\r\n   * @param layer Layer\r\n   */\r\n  public hasLayer(layer: Layer) {\r\n    return !!layer && this.layers.has(layer.id);\r\n  }\r\n  /**\r\n   * 删除某个图层\r\n   * @param layer Layer\r\n   */\r\n  public removeLayer(layer: Layer) {\r\n    if (layer && !this.layers.has(layer.id)) {\r\n      return this;\r\n    }\r\n    this.layers.delete(layer.id);\r\n    this.render.redraw();\r\n    this.fire('removed', {layer});\r\n  }\r\n  /**\r\n   * 删除某些图层\r\n   * @param layers 图层组\r\n   */\r\n  public removeLayers(layers: Layer[]) {\r\n    for (const layer of layers) {\r\n      this.layers.delete(layer.id);\r\n      this.highLightLayers.delete(layer.id);\r\n    }\r\n    this.render.redraw();\r\n    for (const layer of layers) {\r\n      layer.fire('removed', {layer});\r\n    }\r\n  }\r\n  /**\r\n   * 清空图层\r\n   */\r\n  public clearAllLayers() {\r\n    this.layers.clear();\r\n    this.render.redraw();\r\n  }\r\n  /**\r\n   * 清除高亮图层\r\n   */\r\n  public clearHighLightLayer(layer?: Layer) {\r\n    if (layer) {\r\n      this.highLightLayers.delete(layer.id);\r\n      this.highLightLayers.delete(layer.id);\r\n    } else {\r\n      this.highLightLayers.clear();\r\n    }\r\n    this.render.renderCacheCanvas();\r\n  }\r\n  /**\r\n   * 添加高亮图层\r\n   */\r\n  public addHighLightLayer(layer: Layer) {\r\n    this.highLightLayers.set(layer.id, layer);\r\n  }\r\n  /**\r\n   * 高亮图层\r\n   */\r\n  public hilightLayers() {\r\n    this.render.renderCacheCanvas();\r\n  }\r\n  /**\r\n   * 遍历图层\r\n   * @param callback 回调函数\r\n   */\r\n  public eachLayer(callback: any) {\r\n    const arrayLayers = Array.from(this.layers);\r\n    for (const value of this.layers) {\r\n      if (callback) {\r\n        callback(value[1], value[0], arrayLayers);\r\n      }\r\n    }\r\n  }\r\n  /**\r\n   * 清空事件监听\r\n   */\r\n  public clearAllEvents() {\r\n    this.events = {};\r\n  }\r\n  /**\r\n   * 缩放\r\n   * @param zoom 缩放级别\r\n   */\r\n  public setZoom(zoom: number) {\r\n    const nzoom = this._getValidateZoom(zoom);\r\n    if (nzoom) {\r\n      this.setView(this.center, nzoom);\r\n    }\r\n  }\r\n  /**\r\n   * 放大\r\n   */\r\n  public zoomIn() {\r\n    this.setZoom(this.zoom + this.zoomChange);\r\n  }\r\n  /**\r\n   * 缩小\r\n   */\r\n  public zoomOut() {\r\n    this.setZoom(this.zoom - this.zoomChange);\r\n  }\r\n  /**\r\n   * 添加图片缓存\r\n   * @param images \r\n   */\r\n  public addImagesCache(images: string[]) {\r\n    for (const url of images) {\r\n      const image: HTMLImageElement = new Image();\r\n      image.src = url;\r\n      image.addEventListener('load', () => {\r\n        this.render.addCache(url, image);\r\n      });\r\n    }\r\n  }\r\n  /**\r\n   * 定位\r\n   * @param center 定位点\r\n   * @param zoom 缩放级别\r\n   */\r\n  public setView(center: Vertex, zoom?: number) {\r\n    // this.center = center;\r\n    // this.zoom = zoom || this.zoom;\r\n    // this.render.setCenter(center, this.zoom);\r\n    // this.render.redraw();\r\n    // this.fire('moveend', {target: this, sourceTarget: event});\r\n    this._render(center, zoom || this.zoom);\r\n  }\r\n  /**\r\n   * 缩放视图窗口至目标Bound\r\n   * @param bound 缩放的Bound\r\n   */\r\n  public fitBound(bound: math.Bound) {\r\n    const center = bound.getCenter();\r\n    const {width, height} = this.getBound();\r\n    let zoom_w = width * this.zoom / bound.width;\r\n    let zoom_h = height * this.zoom / bound.height;\r\n    zoom_w = Math.floor(zoom_w / this.zoomChange) * this.zoomChange;\r\n    zoom_h = Math.floor(zoom_h / this.zoomChange) * this.zoomChange;\r\n    const zoom_min = Math.min(zoom_w, zoom_h);\r\n    let zoom = Math.max(zoom_min, this.minZoom);\r\n    zoom = Math.min(zoom, 1);\r\n    this._render(center, zoom);\r\n  }\r\n  /**\r\n   * 强制重新渲染\r\n   */\r\n  public forceRender(center?: Vertex) {\r\n    this.render.setCenter(center || this.center, this.zoom);\r\n    this.render.redraw();\r\n  }\r\n  /**\r\n   * 开启pan功能\r\n   */\r\n  public enableDrag() {\r\n    this.draggEnable = true;\r\n  }\r\n  /**\r\n   * 关闭pan功能\r\n   */\r\n  public disableDrag() {\r\n    this.draggEnable = false;\r\n  }\r\n  /**\r\n   * 更新画布尺寸\r\n   */\r\n  public updateSize() {\r\n    this.render.resize(this.container.clientWidth, this.container.clientHeight);\r\n  }\r\n  /**\r\n   * 开启批处理\r\n   */\r\n  public startBatch() {\r\n    this.render.setBatch(true);\r\n  }\r\n  /**\r\n   * 关闭批处理\r\n   */\r\n  public endBatch() {\r\n    this.render.setBatch(false);\r\n    this.render.redraw();\r\n  }\r\n  /**\r\n   * 移动画布到新的位置\r\n   * @param targetCenter 新的中心点\r\n   * @param targetZoom 新的缩放等级\r\n   */\r\n  private _render(targetCenter: Vertex, targetZoom: number) {\r\n    const stepX: number = (targetCenter[0] - this.center[0]) / 16;\r\n    const stepY: number = (targetCenter[1] - this.center[1]) / 16;\r\n    const zoomChange: number = (targetZoom - this.zoom) / 16;\r\n    const filter = () => {\r\n      return math.Base.isSamePoint(this.getCenter(), targetCenter) && math.Base.isZero(this.zoom - targetZoom);\r\n    }\r\n    if (this.amination) {\r\n      cancelAnimationFrame(this.amination);\r\n    }\r\n    this._amination(stepX, stepY, zoomChange, filter);\r\n  }\r\n  /**\r\n   * 开启动画移动\r\n   * @param stepX x步距\r\n   * @param stepY y步距\r\n   * @param zoomChange zoom步距\r\n   * @param filter 停止动画函数\r\n   */\r\n  private _amination(stepX: number, stepY: number, zoomChange: number, filter: Function) {\r\n    if (filter()) {\r\n      this.fire('moveend', {target: this, sourceTarget: event});\r\n      return;\r\n    }\r\n    this.center[0] += stepX;\r\n    this.center[1] += stepY;\r\n    this.zoom += zoomChange;\r\n    this.amination = requestAnimationFrame(() => {\r\n      this.render.setCenter(this.center, this.zoom);\r\n      this.render.redraw();\r\n      this._amination(stepX, stepY, zoomChange, filter);\r\n    });\r\n  }\r\n  /**\r\n   * 设置stage初始化参数\r\n   * @param options options参数\r\n   */\r\n  protected _setOptions(options?: Options) {\r\n    if (options) {\r\n      this.zoom = options.zoom || this.zoom;\r\n      this.minZoom = options.minZoom || this.minZoom;\r\n      this.maxZoom = options.maxZoom || this.maxZoom;\r\n      this.zoomChange = options.zoomChange || this.zoomChange;\r\n    }\r\n  }\r\n  /**\r\n   * 格式化缩放级别参数\r\n   * @param zoom 缩放级别\r\n   */\r\n  private _getValidateZoom(zoom: number): number | undefined {\r\n    if (isNaN(zoom)) {\r\n      console.warn(`stage zoom can't be NaN`);\r\n      return;\r\n    }\r\n    zoom = Number(zoom);\r\n    zoom = Math.max(this.minZoom, zoom);\r\n    zoom = Math.min(zoom, this.maxZoom);\r\n    return zoom;\r\n  }\r\n  /**\r\n   * 监听页面尺寸变化\r\n   */\r\n  private _resize() {\r\n    window.addEventListener('resize', () => {\r\n      this.updateSize();\r\n    });\r\n  }\r\n  /**\r\n   * 初始化canvas dom元素\r\n   */\r\n  private _initContainer() {\r\n    this.container.appendChild(this.render.getCanvasDom());\r\n    this.container.appendChild(this.render.getCacheCanvasDom());\r\n  }\r\n  /**\r\n   * 初始化画布事件监听\r\n   */\r\n  private _initEvents() {\r\n    const fn = this._eventHandler;\r\n    const events: string[] = ['click', 'dblclick', 'mousedown', 'mousemove', 'mouseup', 'mouseover', 'mouseleave', 'mousewheel', 'contextmenu'];\r\n    for (const evt of events) {\r\n      this._listenerEvent(evt, fn);\r\n    }\r\n    // 绑定默认的平移缩放等事件\r\n    const canvasDom = this.render.getCacheCanvasDom();\r\n    canvasDom.addEventListener(this._formatDOMEvent('mousewheel'), this._zoom.bind(this));\r\n    canvasDom.addEventListener('mousedown', this._pan.bind(this));\r\n    canvasDom.addEventListener('touchstart', this._pan.bind(this));\r\n    document.addEventListener('selectstart', () => false);\r\n  }\r\n  /**\r\n   * 画布缩放事件\r\n   */\r\n  private _zoom() {\r\n    const canvasHelper = this.render.getCanvasHelper();\r\n    const e: any = event;\r\n    const delta = e.wheelDelta ? e.wheelDelta / 120 * this.zoomChange : -e.detail * this.zoomChange;\r\n    if (delta < 0 && (this.zoom + delta) < this.minZoom || delta > 0 && (this.zoom + delta) > this.maxZoom) {\r\n      return;\r\n    }\r\n    this.zoom += delta;\r\n    const offset = canvasHelper.getOffset(e);\r\n    // const c = this.render.getCenter();\r\n    // const offset = canvasHelper.screenToWorldCoordinate([e.offsetX, e.offsetY]);\r\n    // this.center = [c[0] + (offset[0] - c[0]) * delta, c[1] + (offset[1] - c[1]) * delta];\r\n    // console.log('center1', this.center);\r\n    // this.render.setCenter(this.center, this.zoom);\r\n    // this.render.redraw();\r\n    // this.setView(, this.zoom);\r\n    canvasHelper.setScale(this.zoom);\r\n    const center = canvasHelper.getOriginCenter();\r\n    canvasHelper.setCenter([center[0] - offset[0] * delta, center[1] + offset[1] * delta]);\r\n    this.render.updateCacheCanvas();\r\n    this.render.redraw();\r\n    this.fire('moveend', {target: this, sourceTarget: event});\r\n    e.preventDefault();\r\n  }\r\n  /**\r\n   * 画布平移事件\r\n   */\r\n  private _pan() {\r\n    if (!this.draggEnable) {\r\n      return;\r\n    }\r\n    const canvasHelper = this.render.getCanvasHelper();\r\n    const e: any = event;\r\n    let lastPosition: number[] = [e.clientX, e.clientY];\r\n    if (e.touches) {\r\n      lastPosition = [e.touches[0].clientX, e.touches[0].clientY];\r\n    }\r\n    // e.preventDefault();\r\n    const moveFunction = () => {\r\n      let ev: any = event;\r\n      if (ev.touches) {\r\n        ev = ev.touches[0];\r\n      }\r\n      const curPosition = [ev.clientX, ev.clientY];\r\n      const deltaX = (curPosition[0] - lastPosition[0]) * canvasHelper.retina;\r\n      const deltaY = (curPosition[1] - lastPosition[1]) * canvasHelper.retina;\r\n      lastPosition = curPosition;\r\n      const center = canvasHelper.getOriginCenter();\r\n      canvasHelper.setCenter([center[0] + deltaX, center[1] + deltaY]);\r\n      this.render.updateCacheCanvas();\r\n      this.render.redraw();\r\n      ev.preventDefault();\r\n    };\r\n    const upFunction = () => {\r\n      document.removeEventListener('mousemove', moveFunction);\r\n      document.removeEventListener('mouseup', upFunction);\r\n      document.removeEventListener('touchmove', moveFunction);\r\n      document.removeEventListener('touchend', upFunction);\r\n      const evt: any = event;\r\n      this.center = this.getCenter();\r\n      this.fire('moveend', {target: this, sourceTarget: evt});\r\n      evt.preventDefault();\r\n    };\r\n    document.addEventListener(this._formatDOMEvent('mousemove'), moveFunction);\r\n    document.addEventListener(this._formatDOMEvent('mouseup'), upFunction);\r\n    document.addEventListener('touchmove', moveFunction);\r\n    document.addEventListener('touchend', upFunction);\r\n  }\r\n  /**\r\n   * 监听画布的事件\r\n   * @param type 事件类型\r\n   * @param fn 响应函数\r\n   */\r\n  private _listenerEvent(type: string, fn: any) {\r\n    const evt: string = this._validEventType(type);\r\n    if (evt) {\r\n      const canvasDom = this.render.getCacheCanvasDom();\r\n      canvasDom.addEventListener(evt, fn.bind(this));\r\n    }\r\n  }\r\n  /**\r\n   * 分发监听事件\r\n   */\r\n  private _eventHandler() {\r\n    const e: any = event;\r\n    const evt: string = e.type;\r\n    const data: EventData = {target: this, sourceTarget: e};\r\n    // 修改蔽默认的右键菜单事件\r\n    if (e.type === 'contextmenu') {\r\n      // evt = 'mousedown|mouseup|click';\r\n      e.preventDefault();\r\n    }\r\n    if (e.type !== 'keypress') {\r\n      data.pos = this.render.getPos([e.offsetX, e.offsetY]);\r\n    }\r\n    const events: string[] = evt.split('|');\r\n    events.forEach((ets: string) => {\r\n      this._fireEvent(ets, data);\r\n    });\r\n  }\r\n  /**\r\n   * 响应监听事件\r\n   * @param evt 事件类型\r\n   * @param data 回调参数\r\n   */\r\n  private _fireEvent(evt: string, data: EventData) {\r\n    const targets: Evt[] = this._findEventTargets(evt, data.pos);\r\n    for (const target of targets) {\r\n      data.layer = target;\r\n      target.fire(evt, data);\r\n    }\r\n  }\r\n  /**\r\n   * 查找事件监听目标\r\n   * @param evt 事件类型\r\n   * @param pos 鼠标事件的坐标\r\n   */\r\n  private _findEventTargets(evt: string, pos?: Vertex): Evt[] {\r\n    const targets: Evt[] = [];\r\n    for (const [id, layer] of this.layers) {\r\n      if (layer.type === GraphType.GROUP) {\r\n        // 修改layerGroup里面的子图层事件监听不到bug\r\n        for (const glayer of (layer as LayerGroup).getLayers()) {\r\n          if (glayer.listens(evt) && pos && glayer.isPointClosest(pos)) {\r\n            targets.push(glayer);\r\n            if (targets.includes(layer)) {\r\n              targets.push(layer);\r\n            }\r\n          }\r\n        }\r\n      } else if (layer.listens(evt) && pos && layer.isPointClosest(pos)) {\r\n        targets.push(layer);\r\n      }\r\n    }\r\n    if (this.listens(evt)) {\r\n      targets.push(this);\r\n    }\r\n    return targets;\r\n  }\r\n  /**\r\n   * 处理浏览器之间事件的兼容性\r\n   * @param evt 事件类型\r\n   */\r\n  private _formatDOMEvent(evt: string): string {\r\n    if (navigator.userAgent.includes('Firefox')) {\r\n      if (evt === 'mousewheel') {\r\n        return 'DOMMouseScroll';\r\n      }\r\n    }\r\n    return evt;\r\n  }\r\n  /**\r\n   * 格式化事件类型\r\n   * @param evt 事件类型\r\n   */\r\n  private _validEventType(evt: string): string {\r\n    evt = evt.toLowerCase();\r\n    const validType: ValidEventType = {\r\n      click: 'click',\r\n      dblclick: 'dblclick',\r\n      mousedown: 'mousedown',\r\n      mousemove: 'mousemove',\r\n      mouseup: 'mouseup',\r\n      mouseover: 'mouseover',\r\n      mouseleave: 'mouseleave',\r\n      mousewheel: 'mousewheel',\r\n      contextmenu: 'contextmenu',\r\n    };\r\n    return validType[evt] || '';\r\n  }\r\n}\r\n","import Layer from './layer';\r\nimport { GraphType, XY, Vertex} from '../typeof/typeof';\r\nimport * as math from '../math/index';\r\n\r\nexport default class Circle extends Layer {\r\n  protected geometry: Vertex;\r\n  protected radius: number = 0;\r\n  constructor(geo: Vertex, radius: number, options: {[k: string]: any}) {\r\n    super();\r\n    this.setOptions(options);\r\n    this.highOptions.fill = this.options.fill;\r\n    this.geometry = geo;\r\n    this.radius = radius;\r\n  }\r\n  public getLayerType(): GraphType {\r\n    return GraphType.CIRCLE;\r\n  }\r\n  public getGeometry(): Vertex {\r\n    return this.geometry;\r\n  }\r\n  public getCenter(): Vertex {\r\n    return this.geometry;\r\n  }\r\n  public getRadius(): number {\r\n    return this.radius;\r\n  }\r\n  public getBound(): math.Bound {\r\n    return new math.Bound(this.geometry[0] - this.radius, this.geometry[1] - this.radius, this.radius * 2, this.radius * 2);\r\n  }\r\n  public setGeometry(geo: number[]) {\r\n    this.geometry = geo;\r\n    this.updateAll();\r\n  }\r\n  public setRadius(radius: number) {\r\n    this.radius = radius;\r\n    this.updateAll();\r\n  }\r\n  public contain(p: Vertex): boolean {\r\n    const distance: number = math.Base.getDistance(p, this.geometry);\r\n    return distance < this.radius;\r\n  }\r\n  public translate(dx: number, dy: number) {\r\n    const geo = [this.geometry[0] + dx, this.geometry[1] + dy];\r\n    this.setGeometry(geo);\r\n  }\r\n  public isPointClosest(pt: Vertex, tolerance?: number): boolean {\r\n    if (this.options.fill || !this.options.strict) {\r\n      return math.Base.getSquareDistance(pt, this.geometry) <= this.radius ** 2;\r\n    } else {\r\n      const distance: number = math.Base.getDistance(pt, this.geometry);\r\n      const tol = tolerance !== undefined ? tolerance : this.tolerance;\r\n      return math.Base.isZero(distance - this.radius, tol);\r\n    }\r\n  }\r\n  public getNearestPoint(p: Vertex): Vertex {\r\n    const center = new math.Vector2(this.geometry);\r\n    const vp = new math.Vector2(p);\r\n    const dir = new math.Vector2(vp.x - center.x, vp.y - center.y).normalize();\r\n    const np = center.clone().add(dir.scale(this.radius));\r\n    return [np.x, np.y];\r\n  }\r\n  public isIntersectWithBound(bound: math.Bound): boolean {\r\n    const center: math.Vector2 = new math.Vector2(this.getCenter());\r\n    const bCenter: math.Vector2 = new math.Vector2(bound.getCenter());\r\n    const v: math.Vector2 = center.clone().substract(bCenter);\r\n    v.x = Math.abs(v.x);\r\n    v.y = Math.abs(v.y);\r\n    const h: math.Vector2 = new math.Vector2(bound.width / 2, bound.height / 2);\r\n    const u: math.Vector2 = v.clone().substract(h);\r\n    u.x = Math.max(u.x, 0);\r\n    u.y = Math.max(u.y, 0);\r\n    const d: number = u.getSquareLength();\r\n    let contain = false;\r\n    for (const p of bound.getVetexs()) {\r\n      if (!this.contain(p)) {\r\n        contain = true;\r\n      }\r\n    }\r\n    if (d <= this.radius ** 2) {\r\n      if (!this.options.fill || this.options.strict) {\r\n        return contain;\r\n      }\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n  public clone() {\r\n    const options = {...this.options, _render: null, _stage: null};\r\n    return new Circle([this.geometry[0], this.geometry[1]], this.radius, options);\r\n  }\r\n}\r\n","import Layer from './layer';\r\nimport { GraphType, Vertex } from '../typeof/typeof';\r\nimport {Polyline as mPolyline, Base, Bound} from '../math/index';\r\nimport Util from '../util/util';\r\n\r\nexport default class Polyline extends Layer {\r\n  protected geometry: Vertex[] | Vertex[][];\r\n  constructor(geo: Vertex[] | Vertex[][], options: {[k: string]: any} = {}) {\r\n    super();\r\n    const defaultOptions = {\r\n      stroke: true,\r\n      weight: 1,\r\n    };\r\n    this.setOptions({...defaultOptions, ...options});\r\n    this.highOptions.fill = false;\r\n    this.geometry = this.clearnData(geo);\r\n  }\r\n  public clone(): Polyline {\r\n    const options = {...this.options};\r\n    delete options._stage;\r\n    delete options._render;\r\n    return new Polyline(this.geometry, options);\r\n  }\r\n  public getLayerType(): GraphType {\r\n    return GraphType.POLYLINE;\r\n  }\r\n  public getGeometry(): Vertex[] | Vertex[][] {\r\n    return this.geometry;\r\n  }\r\n  public setGeometry(geo: Vertex[] | Vertex[][]) {\r\n    this.geometry = geo;\r\n    this.updateAll();\r\n  }\r\n  public addVertex(vertex: Vertex) {\r\n    const geometry: any = this.getGeometry();\r\n    if (!this.isMutiLine()) {\r\n      geometry.push(vertex);\r\n      this.updateAll();\r\n    }\r\n  }\r\n  public translate(dx: number, dy: number) {\r\n    if (!this.isMutiLine()) {\r\n      const geo: Vertex[] = (this.geometry as Vertex[]).map((pt: Vertex) => {\r\n        return [pt[0] + dx, pt[1] + dy];\r\n      });\r\n      this.setGeometry(geo);\r\n    } else {\r\n      const geo = (this.geometry as Vertex[][]).map((pts: Vertex[]) => {\r\n        return pts.map((pt: Vertex) => {\r\n          return [pt[0] + dx, pt[1] + dy];\r\n        });\r\n      });\r\n      this.setGeometry(geo);\r\n    }\r\n  }\r\n  public isMutiLine(): boolean {\r\n    const level: number = Util.dimension_Array(this.geometry);\r\n    return level === 3;\r\n  }\r\n  public setLastVertex(vertex: Vertex) {\r\n    const geometry: any = this.getGeometry();\r\n    if (!this.isMutiLine()) {\r\n      geometry.splice(-1, 1, vertex);\r\n      this.updateAll();\r\n    }\r\n  }\r\n  public getMinDistance(p: Vertex): number {\r\n    let dis: number = Number.MAX_SAFE_INTEGER;\r\n    const geometry: any = this.getGeometry();\r\n    if (!this.isMutiLine()) {\r\n      const mply: mPolyline = new mPolyline(geometry);\r\n      const nearestPoint: Vertex = mply.getNearestPoint(p);\r\n      dis = Base.getDistance(p, nearestPoint);\r\n    } else {\r\n      for (const geo of geometry) {\r\n        const mply: mPolyline = new mPolyline(geo);\r\n        const nearestPoint: Vertex = mply.getNearestPoint(p);\r\n        const ddis: number = Base.getDistance(p, nearestPoint);\r\n        dis = Math.min(dis, ddis);\r\n      }\r\n    }\r\n    return dis;\r\n  }\r\n  public getNearestPoint(p: Vertex): Vertex {\r\n    let dis: number = Number.MAX_SAFE_INTEGER;\r\n    const geometry: any = this.getGeometry();\r\n    if (!this.isMutiLine()) {\r\n      const mply: mPolyline = new mPolyline(geometry);\r\n      const nearestPoint: Vertex = mply.getNearestPoint(p);\r\n      return nearestPoint;\r\n    } else {\r\n      let vertex: Vertex = [0, 0];\r\n      for (const geo of geometry) {\r\n        const mply: mPolyline = new mPolyline(geo);\r\n        const nearestPoint: Vertex = mply.getNearestPoint(p);\r\n        const ddis: number = Base.getDistance(p, nearestPoint);\r\n        if (ddis < dis) {\r\n          vertex = nearestPoint;\r\n          dis = ddis;\r\n        }\r\n      }\r\n      return vertex;\r\n    }\r\n  }\r\n  public isPointClosest(p: Vertex, tolerance?: number): boolean {\r\n    const dis = this.getMinDistance(p);\r\n    return tolerance !== undefined ? dis <= tolerance : dis <= this.tolerance;\r\n  }\r\n  public isIntersectWithBound(bound: Bound): boolean {\r\n    const geoms: any = this.getGeometry();\r\n    if (!this.isMutiLine()) {\r\n      for (let i = 0; i < geoms.length - 1; i++) {\r\n        if (bound.isIntersectOfSegment(geoms[i], geoms[i + 1])) {\r\n          return true;\r\n        }\r\n      }\r\n    } else {\r\n      for (const geo of geoms) {\r\n        for (let i = 0; i < geo.length - 1; i++) {\r\n          if (bound.isIntersectOfSegment(geo[i], geo[i + 1])) {\r\n            return true;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n}\r\n","import Polyline from './polyline';\r\nimport { GraphType, Vertex } from '../typeof/typeof';\r\nimport * as math from '../math/index';\r\n\r\nexport default class Polygon extends Polyline {\r\n  constructor(geo: Vertex[] | Vertex[][], options: {[k: string]: any} = {}) {\r\n    const defaultOptions = {\r\n      fill: true,\r\n      stroke: true,\r\n      weight: 1,\r\n    };\r\n    super(geo, {...defaultOptions, ...options});\r\n    this.highOptions.fill = typeof this.options.fill === 'undefined' ? true : this.options.fill;\r\n  }\r\n  public getLayerType(): GraphType.POLYGON {\r\n    return GraphType.POLYGON;\r\n  }\r\n  public isPointClosest(p: Vertex, tolerance: number = 0): boolean {\r\n    const geometry: any = this.getGeometry();\r\n    if (this.options.fill || !this.options.strict) {\r\n      const mpolygon: math.Polygon = new math.Polygon(geometry);\r\n      return mpolygon.contain(p, tolerance);\r\n    } else {\r\n      const dis = this.getMinDistance(p);\r\n      return dis <= this.tolerance;\r\n    }\r\n  }\r\n}\r\n","import Layer from './layer';\r\nimport { GraphType, Vertex } from '../typeof/typeof';\r\nimport * as math from '../math/index';\r\n\r\nexport default class Rectangle extends Layer {\r\n  public width: number = 0;\r\n  public height: number = 0;\r\n  public southWest: Vertex = [];\r\n  constructor(a?: any, b?: any, c?: any, d?: any) {\r\n    super();\r\n    if (typeof arguments[1] === 'number' && typeof arguments[2] === 'number') {\r\n      const southWest = arguments[0].slice();\r\n      const width = arguments[1];\r\n      const height = arguments[2];\r\n      if (width < 0) {\r\n        southWest[0] += southWest[0];\r\n      }\r\n      if (height < 0) {\r\n        southWest[1] += southWest[1];\r\n      }\r\n      this.southWest = [southWest[0], southWest[1]];\r\n      this.width = Math.abs(width);\r\n      this.height = Math.abs(height);\r\n    } else if (Array.isArray(arguments[0]) && Array.isArray(arguments[1])) {\r\n      this.southWest = [Math.min(arguments[0][0], arguments[1][0]), Math.min(arguments[0][1], arguments[1][1])];\r\n      this.width = Math.abs(arguments[0][0] - arguments[1][0]);\r\n      this.height = Math.abs(arguments[0][1] - arguments[1][1]);\r\n    } else {\r\n      throw TypeError('Rectangle constructor arguments in invalid');\r\n    }\r\n    let options = {};\r\n    if (Object.prototype.toString.call(arguments[arguments.length - 1]) === '[object Object]') {\r\n      options = {...arguments[arguments.length - 1]};\r\n    }\r\n    const defaultOptions = {\r\n      fill: true,\r\n      stroke: true,\r\n      weight: 1,\r\n    };\r\n    this.setOptions({...defaultOptions, ...options});\r\n    this.highOptions.fill = this.options.fill;\r\n  }\r\n  public getGeometry(): math.Bound {\r\n    return new math.Bound(this.southWest[0], this.southWest[1], this.width, this.height);\r\n  }\r\n  public getLayerType(): GraphType.RECTANGLE {\r\n    return GraphType.RECTANGLE;\r\n  }\r\n  /**\r\n   * 返回左上角坐标\r\n   */\r\n  public getNorthWest(): Vertex {\r\n    return [this.southWest[0], this.southWest[1] + this.height];\r\n  }\r\n  /**\r\n   * 返回左下角坐标\r\n   */\r\n  public getSouthWest(): Vertex {\r\n    return this.southWest;\r\n  }\r\n  public translate(dx: number, dy: number) {\r\n    this.southWest[0] += dx;\r\n    this.southWest[1] += dy;\r\n    this.updateAll();\r\n  }\r\n  /**\r\n   * 设置矩形的Bound\r\n   * @param bound Bound\r\n   */\r\n  public setBound(bound: math.Bound) {\r\n    this.southWest = [bound.x, bound.y];\r\n    this.width = bound.width;\r\n    this.height = bound.height;\r\n    this.updateAll();\r\n  }\r\n  /**\r\n   * 设置对角坐标\r\n   * @param corner1 对角坐标1\r\n   * @param corner2 对角坐标2\r\n   */\r\n  public setCorner(corner1: Vertex, corner2: Vertex) {\r\n    this.southWest = [Math.min(corner1[0], corner2[0]), Math.min(corner1[1], corner2[1])];\r\n    this.width = Math.abs(corner1[0] - corner2[0]);\r\n    this.height = Math.abs(corner1[1] - corner2[1]);\r\n    this.updateAll();\r\n  }\r\n  public isPointClosest(p: Vertex): boolean {\r\n    const bound: math.Bound = this.getGeometry();\r\n    if (this.options.fill || !this.options.strict) {\r\n      return bound.contain(p);\r\n    } else {\r\n      const ply: math.Polyline = new math.Polyline(bound.getVetexs());\r\n      const nearestPoint: Vertex = ply.getNearestPoint(p);\r\n      const dis: number = math.Base.getDistance(p, nearestPoint);\r\n      return dis <= this.tolerance;\r\n    }\r\n  }\r\n  public getNearestPoint(p: Vertex): Vertex {\r\n    const bound = this.getBound();\r\n    const vertexs: Vertex[] = bound.getVetexs();\r\n    vertexs.push(vertexs[0]);\r\n    const ply = new math.Polyline(vertexs);\r\n    return ply.getNearestPoint(p);\r\n  }\r\n  /**\r\n   * 图层是否与Bound相交\r\n   * @param bound Bound\r\n   */\r\n  public isIntersectWithBound(bound: math.Bound): boolean {\r\n    return bound.isOverlaped(this.getBound());\r\n  }\r\n  public clone() {\r\n    const options = {...this.options, _render: null, _stage: null};\r\n    return new Rectangle([this.southWest[0], this.southWest[1]], this.width, this.height, options);\r\n  }\r\n}\r\n","import Layer from './layer';\r\nimport { GraphType } from '../typeof/typeof';\r\nimport * as math from '../math/index';\r\nimport { Vertex } from '../math/typedef/geometry_type';\r\n\r\nexport default class ImageLayer extends Layer {\r\n  public url: string;\r\n  public accesible: boolean = true;\r\n  public x: number;\r\n  public y: number;\r\n  private width: number;\r\n  private height: number;\r\n  constructor(url: string, x: number, y: number, width?: number, height?: number, options: {[k: string]: string} = {}) {\r\n    super();\r\n    this.url = url;\r\n    this.x = x;\r\n    this.y = y;\r\n    this.width = width || -1;\r\n    this.height = height || -1;\r\n    this.setOptions(options);\r\n  }\r\n  public getLayerType() {\r\n    return GraphType.IMAGE;\r\n  }\r\n  public getGeometry(): math.Bound {\r\n    return new math.Bound(this.x - this.width / 2, this.y - this.height / 2, this.width, this.height);\r\n  }\r\n  public setImage(url: string, width?: number, height?: number) {\r\n    this.url = url;\r\n    if (width) {\r\n      this.width = width;\r\n    }\r\n    if (height) {\r\n      this.height = height;\r\n    }\r\n    this.updateAll();\r\n  }\r\n  public async loadImageData(): Promise<any> {\r\n    const image: HTMLImageElement = new Image();\r\n    // image.setAttribute('crossOrigin', 'anonymous');\r\n    image.src = this.url;\r\n    const self = this;\r\n    return new Promise((resolve, reject) => {\r\n      image.addEventListener('load', () => {\r\n        self._setImage(image);\r\n        resolve(image);\r\n      });\r\n      image.addEventListener('error', () => {\r\n        self.accesible = false;\r\n        reject('image is not found');\r\n      });\r\n    });\r\n  }\r\n  public translate(dx: number, dy: number) {\r\n    this.x += dx;\r\n    this.y += dy;\r\n    this.updateAll();\r\n  }\r\n  public isPointClosest(p: Vertex): boolean {\r\n    if (this.options.type === 'baseLayer') {\r\n      return false;\r\n    } else {\r\n      const bound = this.getBound();\r\n      return bound.contain(p);\r\n    }\r\n  }\r\n  public isWithinBound(bound: math.Bound): boolean {\r\n    if (this.options.type === 'baseLayer') {\r\n      return false;\r\n    } else {\r\n      const bbound = this.getBound();\r\n      return bound.isOverlaped(bbound);\r\n    }\r\n  }\r\n  public isIntersectWithBound(bound: math.Bound): boolean {\r\n    if (this.options.type === 'baseLayer') {\r\n      return false;\r\n    } else {\r\n      const bbound = this.getBound();\r\n      return bbound.isOverlaped(bound);\r\n    }\r\n  }\r\n  public clone() {\r\n    return new ImageLayer(this.url, this.x, this.y, this.width, this.height, {...this.options});\r\n  }\r\n  private _setImage(image: HTMLImageElement) {\r\n    if (this.width === -1 || this.height === -1) {\r\n      this.width = image.width;\r\n      this.height = image.height;\r\n    }\r\n  }\r\n}\r\n","import Stage from '../core/stage';\r\nimport Layer from './layer';\r\nimport { GraphType, Vertex } from '../typeof/typeof';\r\nimport * as math from '../math/index';\r\nimport IText from './text';\r\n\r\n\r\nexport default class LayerGroup extends Layer {\r\n  private layers: Map<string, Layer> = new Map();\r\n  constructor(layers: Layer[], options: {[k: string]: any} = {}) {\r\n    super();\r\n    const defaultOptions = {\r\n      strict: true,\r\n    };\r\n    this.setOptions({...defaultOptions, ...options});\r\n    for (const layer of layers) {\r\n      this.layers.set(layer.id, layer);\r\n    }\r\n  }\r\n  public getLayerType(): GraphType.GROUP {\r\n    return GraphType.GROUP;\r\n  }\r\n  public getGeometry() {\r\n    if (this.layers.size === 0) {\r\n      return;\r\n    }\r\n    const bounds: math.Bound[] = [];\r\n    for (const [id, layer] of this.layers) {\r\n      const bound = layer.getBound();\r\n      bounds[0] = bounds.length > 0 ? bounds[0].union(bound) : bound;\r\n    }\r\n    return bounds[0];\r\n  }\r\n  /**\r\n   * 返回所有子图层\r\n   */\r\n  public getLayers() {\r\n    return Array.from(this.layers.values());\r\n  }\r\n  /**\r\n   * 根据条件返回子图层\r\n   * @param filter 筛选函数\r\n   */\r\n  public getLayer(filter: any): Layer | undefined {\r\n    for (const layer of this.getLayers()) {\r\n      if (filter(layer)) {\r\n        return layer;\r\n      }\r\n    }\r\n  }\r\n  /**\r\n   * 遍历图层\r\n   * @param callback callback\r\n   */\r\n  public eachLayer(callback?: any) {\r\n    const layers = this.getLayers();\r\n    for (let i = 0; i < layers.length; i++) {\r\n      if (callback) {\r\n        callback(layers[i], i, layers);\r\n      }\r\n    }\r\n  }\r\n  /**\r\n   * 设置子图层的渲染器\r\n   * @param stage Stage\r\n   */\r\n  public setSubRender(stage: Stage) {\r\n    const layers = this.getLayers();\r\n    for (const layer of layers) {\r\n      if (!layer.options._stage || layer.options._stage !== stage) {\r\n        layer.options._stage = stage;\r\n        layer.options._render = stage.render;\r\n        if (layer instanceof IText) {\r\n          layer.fixContent();\r\n        }\r\n      }\r\n    }\r\n  }\r\n  public addLayer(layer: Layer) {\r\n    this.layers.set(layer.id, layer);\r\n    this.updateAll();\r\n  }\r\n  /**\r\n   * 删除图层\r\n   * @param layer Layer\r\n   */\r\n  public removeLayer(layer: Layer) {\r\n    this.layers.delete(layer.id);\r\n    this.updateAll();\r\n  }\r\n  public translate(dx: number, dy: number) {\r\n    this.eachLayer((layer: Layer) => {\r\n      layer.translate(dx, dy);\r\n    });\r\n  }\r\n  public isPointClosest(pos: Vertex, tolerance?: number): boolean {\r\n    for (const [id, layer] of this.layers) {\r\n      if (layer.isPointClosest(pos)) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n  public isIntersectWithBound(bound: math.Bound): boolean {\r\n    for (const [id, layer] of this.layers) {\r\n      if (layer.isIntersectWithBound(bound)) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n  /**\r\n   * 高亮图层\r\n   * @param options Object\r\n   */\r\n  public highLight() {\r\n    (this.options._stage as Stage).addHighLightLayer(this);\r\n  }\r\n  public clone() {\r\n    const options = {...this.options, _render: null, _stage: null};\r\n    const layerGroup = new LayerGroup([], options);\r\n    this.eachLayer((layer: Layer) => {\r\n      layerGroup.addLayer(layer.clone());\r\n    });\r\n    return layerGroup;\r\n  }\r\n}\r\n","import Stage from './lib/core/stage';\r\nimport Layer from './lib/layer/layer';\r\nimport Circle from './lib/layer/circle';\r\nimport Polyline from './lib/layer/polyline';\r\nimport Polygon from './lib/layer/polygon';\r\nimport Rectangle from './lib/layer/rectangle';\r\nimport ImageLayer from './lib/layer/imageLayer';\r\nimport LayerGroup from './lib/layer/layerGroup';\r\nimport IText from './lib/layer/text';\r\nimport * as Math from './lib/math/index';\r\nimport Util from './lib/util/util';\r\n\r\nexport {\r\n  Stage,\r\n  Layer,\r\n  Circle,\r\n  Polyline,\r\n  Polygon,\r\n  Rectangle,\r\n  ImageLayer,\r\n  LayerGroup,\r\n  IText,\r\n  Math,\r\n  Util,\r\n};\r\n"],"sourceRoot":""}